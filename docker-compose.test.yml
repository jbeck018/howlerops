version: '3.8'

services:
  # Test Databases
  postgres-test:
    image: postgres:15
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d testdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  mysql-test:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: testdb
      MYSQL_USER: testuser
      MYSQL_PASSWORD: testpass
    ports:
      - "3307:3306"
    volumes:
      - mysql_test_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-test:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Tests
  backend-test:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: test
    environment:
      NODE_ENV: test
      TEST_POSTGRES_HOST: postgres-test
      TEST_POSTGRES_PORT: 5432
      TEST_POSTGRES_DATABASE: testdb
      TEST_POSTGRES_USERNAME: testuser
      TEST_POSTGRES_PASSWORD: testpass
      TEST_MYSQL_HOST: mysql-test
      TEST_MYSQL_PORT: 3306
      TEST_MYSQL_DATABASE: testdb
      TEST_MYSQL_USERNAME: testuser
      TEST_MYSQL_PASSWORD: testpass
      TEST_REDIS_HOST: redis-test
      TEST_REDIS_PORT: 6379
    depends_on:
      postgres-test:
        condition: service_healthy
      mysql-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./coverage/backend:/app/coverage
    command: npm run test:coverage

  # Frontend Tests
  frontend-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: test
    environment:
      NODE_ENV: test
      VITE_API_URL: http://localhost:3000
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - ./coverage/frontend:/app/coverage
    command: npm run test:coverage

  # Load Tests
  load-test:
    image: grafana/k6:latest
    volumes:
      - ./backend/src/__tests__/load:/scripts
      - ./k6-results:/results
    environment:
      BASE_URL: http://backend-test:3000
    depends_on:
      - backend-test
    command: run --out json=/results/load-test-results.json /scripts/api-load.js

  # E2E Tests
  e2e-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: e2e
    environment:
      PLAYWRIGHT_BASE_URL: http://frontend-test:5173
      API_BASE_URL: http://backend-test:3000
    depends_on:
      - backend-test
      - frontend-test
    volumes:
      - ./frontend/src/__tests__/e2e:/app/tests
      - ./e2e-results:/app/test-results
    command: npx playwright test

  # Test Results Aggregator
  test-aggregator:
    image: alpine:latest
    depends_on:
      - backend-test
      - frontend-test
      - e2e-test
    volumes:
      - ./coverage:/coverage
      - ./test-results:/test-results
      - ./scripts:/scripts
    command: /scripts/aggregate-results.sh

volumes:
  postgres_test_data:
  mysql_test_data:

networks:
  default:
    driver: bridge