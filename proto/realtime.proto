syntax = "proto3";

package sqlstudio.realtime;

option go_package = "github.com/sql-studio/backend-go/api/realtime";

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

// Real-time service for WebSocket-like functionality
service RealtimeService {
  rpc Subscribe(SubscribeRequest) returns (stream RealtimeEvent);
  rpc Unsubscribe(UnsubscribeRequest) returns (UnsubscribeResponse);
  rpc PublishEvent(PublishEventRequest) returns (PublishEventResponse);
  rpc GetActiveSubscriptions(GetActiveSubscriptionsRequest) returns (GetActiveSubscriptionsResponse);
}

// Event types
enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0;
  EVENT_TYPE_QUERY_PROGRESS = 1;
  EVENT_TYPE_QUERY_RESULT = 2;
  EVENT_TYPE_QUERY_ERROR = 3;
  EVENT_TYPE_CONNECTION_STATUS = 4;
  EVENT_TYPE_TABLE_CHANGED = 5;
  EVENT_TYPE_SCHEMA_CHANGED = 6;
  EVENT_TYPE_USER_ACTION = 7;
  EVENT_TYPE_SYSTEM_ALERT = 8;
  EVENT_TYPE_HEARTBEAT = 9;
}

// Subscription types
enum SubscriptionType {
  SUBSCRIPTION_TYPE_UNSPECIFIED = 0;
  SUBSCRIPTION_TYPE_QUERY_UPDATES = 1;
  SUBSCRIPTION_TYPE_CONNECTION_UPDATES = 2;
  SUBSCRIPTION_TYPE_TABLE_UPDATES = 3;
  SUBSCRIPTION_TYPE_SCHEMA_UPDATES = 4;
  SUBSCRIPTION_TYPE_USER_ACTIVITIES = 5;
  SUBSCRIPTION_TYPE_SYSTEM_EVENTS = 6;
  SUBSCRIPTION_TYPE_ALL = 7;
}

// Subscribe request
message SubscribeRequest {
  string client_id = 1;
  repeated SubscriptionType types = 2;
  map<string, string> filters = 3; // e.g., connection_id, table_name
  string auth_token = 4;
}

// Unsubscribe request
message UnsubscribeRequest {
  string client_id = 1;
  repeated SubscriptionType types = 2; // Empty means unsubscribe from all
}

// Unsubscribe response
message UnsubscribeResponse {
  bool success = 1;
  string message = 2;
}

// Query progress event
message QueryProgressEvent {
  string query_id = 1;
  string connection_id = 2;
  string user_id = 3;
  int64 rows_processed = 4;
  int64 total_rows = 5;
  double progress_percentage = 6;
  string current_phase = 7;
  google.protobuf.Timestamp timestamp = 8;
}

// Query result event
message QueryResultEvent {
  string query_id = 1;
  string connection_id = 2;
  string user_id = 3;
  bool success = 4;
  int64 rows_affected = 5;
  int64 duration_ms = 6;
  google.protobuf.Timestamp timestamp = 7;
}

// Query error event
message QueryErrorEvent {
  string query_id = 1;
  string connection_id = 2;
  string user_id = 3;
  string error_message = 4;
  string error_code = 5;
  string sql_state = 6;
  google.protobuf.Timestamp timestamp = 7;
}

// Connection status event
message ConnectionStatusEvent {
  string connection_id = 1;
  string status = 2; // CONNECTED, DISCONNECTED, ERROR, RECONNECTING
  string message = 3;
  int32 active_connections = 4;
  int32 idle_connections = 5;
  google.protobuf.Timestamp timestamp = 6;
}

// Table changed event
message TableChangedEvent {
  string connection_id = 1;
  string schema_name = 2;
  string table_name = 3;
  string operation = 4; // INSERT, UPDATE, DELETE, TRUNCATE
  int64 rows_affected = 5;
  string user_id = 6;
  google.protobuf.Timestamp timestamp = 7;
  map<string, google.protobuf.Any> metadata = 8;
}

// Schema changed event
message SchemaChangedEvent {
  string connection_id = 1;
  string schema_name = 2;
  string object_type = 3; // TABLE, VIEW, INDEX, FUNCTION, etc.
  string object_name = 4;
  string operation = 5; // CREATE, ALTER, DROP
  string user_id = 6;
  google.protobuf.Timestamp timestamp = 7;
  map<string, google.protobuf.Any> metadata = 8;
}

// User action event
message UserActionEvent {
  string user_id = 1;
  string action = 2; // LOGIN, LOGOUT, QUERY_EXECUTE, CONNECTION_CREATE, etc.
  string resource_id = 3; // connection_id, query_id, etc.
  string resource_type = 4;
  google.protobuf.Timestamp timestamp = 5;
  map<string, google.protobuf.Any> metadata = 6;
}

// System alert event
message SystemAlertEvent {
  string alert_id = 1;
  string severity = 2; // INFO, WARNING, ERROR, CRITICAL
  string category = 3; // PERFORMANCE, SECURITY, RESOURCE, etc.
  string message = 4;
  string source = 5;
  google.protobuf.Timestamp timestamp = 6;
  map<string, google.protobuf.Any> metadata = 7;
}

// Heartbeat event
message HeartbeatEvent {
  string server_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  map<string, string> status = 3;
}

// Real-time event
message RealtimeEvent {
  EventType type = 1;
  string event_id = 2;
  google.protobuf.Timestamp timestamp = 3;
  oneof payload {
    QueryProgressEvent query_progress = 4;
    QueryResultEvent query_result = 5;
    QueryErrorEvent query_error = 6;
    ConnectionStatusEvent connection_status = 7;
    TableChangedEvent table_changed = 8;
    SchemaChangedEvent schema_changed = 9;
    UserActionEvent user_action = 10;
    SystemAlertEvent system_alert = 11;
    HeartbeatEvent heartbeat = 12;
  }
}

// Publish event request
message PublishEventRequest {
  RealtimeEvent event = 1;
  repeated string target_clients = 2; // Empty means broadcast to all matching subscribers
  map<string, string> filters = 3; // Additional filters
}

// Publish event response
message PublishEventResponse {
  bool success = 1;
  string message = 2;
  int32 clients_notified = 3;
}

// Get active subscriptions request
message GetActiveSubscriptionsRequest {
  string client_id = 1; // Empty means all clients
}

// Active subscription info
message ActiveSubscription {
  string client_id = 1;
  repeated SubscriptionType types = 2;
  map<string, string> filters = 3;
  google.protobuf.Timestamp subscribed_at = 4;
  google.protobuf.Timestamp last_activity = 5;
}

// Get active subscriptions response
message GetActiveSubscriptionsResponse {
  bool success = 1;
  string message = 2;
  repeated ActiveSubscription subscriptions = 3;
  int32 total_clients = 4;
}