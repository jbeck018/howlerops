# Synthetic Monitoring Configuration for SQL Studio
# External uptime checks from multiple regions

apiVersion: v1
kind: ConfigMap
metadata:
  name: blackbox-exporter-config
  namespace: monitoring
data:
  blackbox.yml: |
    modules:
      # HTTP 2xx check
      http_2xx:
        prober: http
        timeout: 5s
        http:
          valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
          valid_status_codes: [200, 201, 202, 204]
          method: GET
          no_follow_redirects: false
          fail_if_ssl: false
          fail_if_not_ssl: false
          tls_config:
            insecure_skip_verify: false

      # HTTP POST check
      http_post_2xx:
        prober: http
        timeout: 5s
        http:
          method: POST
          valid_status_codes: [200, 201]
          headers:
            Content-Type: application/json
          body: '{}'

      # HTTPS with certificate validation
      https_2xx:
        prober: http
        timeout: 5s
        http:
          valid_status_codes: [200]
          method: GET
          tls_config:
            insecure_skip_verify: false
          fail_if_not_ssl: true

      # TCP connection check
      tcp_connect:
        prober: tcp
        timeout: 5s

      # DNS check
      dns_check:
        prober: dns
        timeout: 5s
        dns:
          query_name: "sqlstudio.example.com"
          query_type: "A"

      # ICMP ping check
      icmp_check:
        prober: icmp
        timeout: 5s
        icmp:
          preferred_ip_protocol: "ip4"

---
# Blackbox Exporter Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blackbox-exporter
  namespace: monitoring
  labels:
    app: blackbox-exporter
spec:
  replicas: 2
  selector:
    matchLabels:
      app: blackbox-exporter
  template:
    metadata:
      labels:
        app: blackbox-exporter
    spec:
      containers:
      - name: blackbox-exporter
        image: prom/blackbox-exporter:v0.24.0
        args:
          - '--config.file=/config/blackbox.yml'
        ports:
        - containerPort: 9115
          name: http
        volumeMounts:
        - name: config
          mountPath: /config
        resources:
          limits:
            memory: 128Mi
            cpu: 100m
          requests:
            memory: 64Mi
            cpu: 50m
        livenessProbe:
          httpGet:
            path: /health
            port: 9115
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 9115
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: config
        configMap:
          name: blackbox-exporter-config

---
# Blackbox Exporter Service
apiVersion: v1
kind: Service
metadata:
  name: blackbox-exporter
  namespace: monitoring
  labels:
    app: blackbox-exporter
spec:
  ports:
  - name: http
    port: 9115
    targetPort: 9115
  selector:
    app: blackbox-exporter
  type: ClusterIP

---
# ServiceMonitor for Prometheus to discover probes
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: blackbox-exporter
  namespace: monitoring
spec:
  selector:
    matchLabels:
      app: blackbox-exporter
  endpoints:
  - port: http
    path: /metrics

---
# Probe definitions for specific endpoints
apiVersion: monitoring.coreos.com/v1
kind: Probe
metadata:
  name: sql-studio-homepage
  namespace: monitoring
spec:
  prober:
    url: blackbox-exporter:9115
  module: https_2xx
  targets:
    staticConfig:
      static:
      - https://sqlstudio.example.com
  interval: 60s
  timeout: 10s

---
apiVersion: monitoring.coreos.com/v1
kind: Probe
metadata:
  name: sql-studio-api-health
  namespace: monitoring
spec:
  prober:
    url: blackbox-exporter:9115
  module: https_2xx
  targets:
    staticConfig:
      static:
      - https://api.sqlstudio.example.com/health
  interval: 30s
  timeout: 5s

---
apiVersion: monitoring.coreos.com/v1
kind: Probe
metadata:
  name: sql-studio-api-ready
  namespace: monitoring
spec:
  prober:
    url: blackbox-exporter:9115
  module: https_2xx
  targets:
    staticConfig:
      static:
      - https://api.sqlstudio.example.com/health/ready
  interval: 30s
  timeout: 5s

---
# Multi-region probes (if using external monitoring service)
# Example using UptimeRobot, Pingdom, or custom solution

# UptimeRobot configuration (via API or UI):
# 1. Homepage check (https://sqlstudio.example.com)
#    - Interval: 1 minute
#    - Regions: US, EU, Asia
#    - Alert on: >2 minutes downtime

# 2. API health check (https://api.sqlstudio.example.com/health)
#    - Interval: 1 minute
#    - Regions: US, EU, Asia
#    - Alert on: >1 minute downtime

# 3. Login endpoint (POST https://api.sqlstudio.example.com/auth/login)
#    - Interval: 5 minutes
#    - Regions: US, EU
#    - Alert on: >5 minutes downtime

# Pingdom configuration:
# - Transaction check for critical user flows
#   1. Navigate to homepage
#   2. Click login
#   3. Submit credentials
#   4. Verify dashboard loads

---
# CronJob for synthetic smoke tests
apiVersion: batch/v1
kind: CronJob
metadata:
  name: synthetic-smoke-tests
  namespace: monitoring
spec:
  schedule: "*/5 * * * *"  # Every 5 minutes
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: smoke-tests
            image: curlimages/curl:latest
            command:
            - /bin/sh
            - -c
            - |
              # Homepage check
              if ! curl -f -s -o /dev/null -w "%{http_code}" https://sqlstudio.example.com | grep -q 200; then
                echo "ERROR: Homepage is down"
                exit 1
              fi

              # API health check
              if ! curl -f -s -o /dev/null -w "%{http_code}" https://api.sqlstudio.example.com/health | grep -q 200; then
                echo "ERROR: API health check failed"
                exit 1
              fi

              # API ready check
              if ! curl -f -s -o /dev/null -w "%{http_code}" https://api.sqlstudio.example.com/health/ready | grep -q 200; then
                echo "ERROR: API not ready"
                exit 1
              fi

              echo "All smoke tests passed"
          restartPolicy: OnFailure
