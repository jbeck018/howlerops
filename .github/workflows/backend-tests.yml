name: Backend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend-go/**'
      - '.github/workflows/backend-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend-go/**'
      - '.github/workflows/backend-tests.yml'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
          cache-dependency-path: backend-go/go.sum

      - name: Install dependencies
        working-directory: backend-go
        run: go mod download

      - name: Run unit tests
        working-directory: backend-go
        run: go test ./... -v -coverprofile=coverage.out -race

      - name: Generate coverage report
        working-directory: backend-go
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./backend-go/coverage.out
          flags: unittests
          name: backend-unit-tests

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: backend-go/coverage.html

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sqlstudio_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
          cache-dependency-path: backend-go/go.sum

      - name: Install dependencies
        working-directory: backend-go
        run: go mod download

      - name: Install jq for tests
        run: sudo apt-get update && sudo apt-get install -y jq bc

      - name: Set up test environment
        working-directory: backend-go
        run: |
          cp .env.example .env || true
          # Set test database URL
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/sqlstudio_test" >> .env
          echo "JWT_SECRET=test-secret-key-for-ci-testing-only-min-32-chars" >> .env

      - name: Build server
        working-directory: backend-go
        run: go build -o server cmd/server/main.go

      - name: Start server in background
        working-directory: backend-go
        run: |
          ./server &
          echo $! > server.pid
          # Wait for server to start
          sleep 10

      - name: Check server health
        run: |
          curl -f http://localhost:8500/health || (cat backend-go/logs/app.log && exit 1)

      - name: Run smoke tests
        working-directory: backend-go
        run: ./scripts/smoke-tests.sh

      - name: Run integration tests
        working-directory: backend-go
        run: go test ./test/integration/... -v -timeout 10m

      - name: Stop server
        if: always()
        working-directory: backend-go
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi

      - name: Upload server logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: server-logs
          path: backend-go/logs/

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
          cache-dependency-path: backend-go/go.sum

      - name: Install dependencies
        working-directory: backend-go
        run: go mod download

      - name: Install test tools
        run: sudo apt-get update && sudo apt-get install -y jq bc

      - name: Build server
        working-directory: backend-go
        run: go build -o server cmd/server/main.go

      - name: Start server
        working-directory: backend-go
        run: |
          ./server &
          echo $! > server.pid
          sleep 10

      - name: Run smoke tests
        working-directory: backend-go
        run: ./scripts/smoke-tests.sh

      - name: Stop server
        if: always()
        working-directory: backend-go
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
          fi

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          working-directory: backend-go
          args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out results.sarif ./backend-go/...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, smoke-tests, lint]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Smoke Tests: ${{ needs.smoke-tests.result }}"
          echo "Lint: ${{ needs.lint.result }}"

          if [ "${{ needs.unit-tests.result }}" != "success" ] || \
             [ "${{ needs.integration-tests.result }}" != "success" ] || \
             [ "${{ needs.smoke-tests.result }}" != "success" ] || \
             [ "${{ needs.lint.result }}" != "success" ]; then
            echo "Some tests failed"
            exit 1
          fi

          echo "All tests passed!"
