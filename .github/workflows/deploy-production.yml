# =============================================================================
# SQL Studio - Production Deployment Workflow
# =============================================================================
# Complete production deployment to Kubernetes with zero-downtime
# =============================================================================

name: Deploy to Production

on:
  # Release published (recommended trigger)
  release:
    types: [published]

  # Manual trigger with options
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: 'Skip tests (NOT recommended)'
        required: false
        default: false
        type: boolean
      skip_migrations:
        description: 'Skip database migrations'
        required: false
        default: false
        type: boolean

# Only one deployment at a time
concurrency:
  group: deploy-production-${{ github.event.inputs.environment || 'production' }}
  cancel-in-progress: false

env:
  GO_VERSION: '1.24'
  NODE_VERSION: '20'
  REGISTRY: gcr.io
  GCP_REGION: us-central1
  CLUSTER_NAME: sql-studio-cluster
  NAMESPACE: sql-studio

jobs:
  # ===========================================================================
  # Job 1: Pre-deployment Validation
  # ===========================================================================
  validate:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      version: ${{ steps.version.outputs.version }}
      backend_image: ${{ steps.version.outputs.backend_image }}
      frontend_image: ${{ steps.version.outputs.frontend_image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="${GITHUB_SHA::7}"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "backend_image=${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/sql-studio-backend:$VERSION" >> $GITHUB_OUTPUT
          echo "frontend_image=${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/sql-studio-frontend:$VERSION" >> $GITHUB_OUTPUT

          echo "Deployment version: $VERSION"

      - name: Validate required secrets
        run: |
          MISSING=()
          [ -z "${{ secrets.GCP_PROJECT_ID }}" ] && MISSING+=("GCP_PROJECT_ID")
          [ -z "${{ secrets.GCP_SA_KEY }}" ] && MISSING+=("GCP_SA_KEY")
          [ -z "${{ secrets.GKE_CLUSTER_NAME }}" ] && MISSING+=("GKE_CLUSTER_NAME")
          [ -z "${{ secrets.TURSO_URL }}" ] && MISSING+=("TURSO_URL")
          [ -z "${{ secrets.TURSO_AUTH_TOKEN }}" ] && MISSING+=("TURSO_AUTH_TOKEN")
          [ -z "${{ secrets.JWT_SECRET }}" ] && MISSING+=("JWT_SECRET")

          if [ ${#MISSING[@]} -gt 0 ]; then
            echo "ERROR: Missing required secrets:"
            printf '  - %s\n' "${MISSING[@]}"
            exit 1
          fi

          echo "All required secrets are configured"

  # ===========================================================================
  # Job 2: Build Backend
  # ===========================================================================
  build-backend:
    name: Build Backend Image
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker gcr.io --quiet

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend-go
          file: ./infrastructure/docker/backend.Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ needs.validate.outputs.backend_image }}
            ${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/sql-studio-backend:latest
          build-args: |
            VERSION=${{ needs.validate.outputs.version }}
            BUILD_TIME=${{ github.event.head_commit.timestamp }}
            GIT_COMMIT=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan backend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.validate.outputs.backend_image }}
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-backend-results.sarif'

  # ===========================================================================
  # Job 3: Build Frontend
  # ===========================================================================
  build-frontend:
    name: Build Frontend Image
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker gcr.io --quiet

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./infrastructure/docker/frontend.Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ needs.validate.outputs.frontend_image }}
            ${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/sql-studio-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.validate.outputs.frontend_image }}
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-frontend-results.sarif'

  # ===========================================================================
  # Job 4: Run Database Migrations
  # ===========================================================================
  migrate-database:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: [validate, build-backend]
    if: ${{ github.event.inputs.skip_migrations != 'true' }}
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --region=${{ env.GCP_REGION }} \
            --project=${{ secrets.GCP_PROJECT_ID }}

      - name: Update migration job image
        run: |
          kubectl set image job/sql-studio-db-migrate \
            migrate=${{ needs.validate.outputs.backend_image }} \
            -n ${{ env.NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Run migrations
        run: |
          # Delete old job if exists
          kubectl delete job sql-studio-db-migrate -n ${{ env.NAMESPACE }} --ignore-not-found=true

          # Create new migration job
          kubectl apply -f infrastructure/database/migration-runner.yaml

          # Wait for job to complete
          kubectl wait --for=condition=complete --timeout=300s \
            job/sql-studio-db-migrate -n ${{ env.NAMESPACE }}

      - name: Check migration logs
        if: always()
        run: |
          kubectl logs job/sql-studio-db-migrate -n ${{ env.NAMESPACE }}

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Migration failed - consider manual rollback"
          # kubectl patch job sql-studio-db-rollback -n ${{ env.NAMESPACE }} -p '{"spec":{"suspend":false}}'

  # ===========================================================================
  # Job 5: Deploy to Kubernetes
  # ===========================================================================
  deploy-kubernetes:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [validate, build-backend, build-frontend, migrate-database]
    if: |
      always() &&
      needs.build-backend.result == 'success' &&
      needs.build-frontend.result == 'success' &&
      (needs.migrate-database.result == 'success' || needs.migrate-database.result == 'skipped')
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --region=${{ env.GCP_REGION }} \
            --project=${{ secrets.GCP_PROJECT_ID }}

      - name: Update backend deployment
        run: |
          kubectl set image deployment/sql-studio-backend \
            backend=${{ needs.validate.outputs.backend_image }} \
            -n ${{ env.NAMESPACE }} \
            --record

          kubectl annotate deployment/sql-studio-backend \
            kubernetes.io/change-cause="Deploy version ${{ needs.validate.outputs.version }}" \
            -n ${{ env.NAMESPACE }} \
            --overwrite

      - name: Update frontend deployment
        run: |
          kubectl set image deployment/sql-studio-frontend \
            frontend=${{ needs.validate.outputs.frontend_image }} \
            -n ${{ env.NAMESPACE }} \
            --record

      - name: Wait for backend rollout
        run: |
          kubectl rollout status deployment/sql-studio-backend \
            -n ${{ env.NAMESPACE }} \
            --timeout=5m

      - name: Wait for frontend rollout
        run: |
          kubectl rollout status deployment/sql-studio-frontend \
            -n ${{ env.NAMESPACE }} \
            --timeout=5m

      - name: Verify deployment
        run: |
          # Check pod status
          kubectl get pods -n ${{ env.NAMESPACE }} -l app=sql-studio

          # Check replica count
          BACKEND_REPLICAS=$(kubectl get deployment sql-studio-backend -n ${{ env.NAMESPACE }} -o jsonpath='{.status.readyReplicas}')
          FRONTEND_REPLICAS=$(kubectl get deployment sql-studio-frontend -n ${{ env.NAMESPACE }} -o jsonpath='{.status.readyReplicas}')

          echo "Backend replicas: $BACKEND_REPLICAS"
          echo "Frontend replicas: $FRONTEND_REPLICAS"

          if [ "$BACKEND_REPLICAS" -lt 1 ] || [ "$FRONTEND_REPLICAS" -lt 1 ]; then
            echo "ERROR: Not enough ready replicas"
            exit 1
          fi

  # ===========================================================================
  # Job 6: Smoke Tests
  # ===========================================================================
  smoke-tests:
    name: Post-deployment Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-kubernetes]
    timeout-minutes: 10

    steps:
      - name: Get service URL
        id: get_url
        run: |
          # In production, use actual domain
          SERVICE_URL="https://api.sql-studio.app"
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT

      - name: Test health endpoint
        run: |
          for i in {1..30}; do
            echo "Health check attempt $i/30..."

            if curl -f -s -m 10 "${{ steps.get_url.outputs.url }}/health" > /dev/null; then
              echo "✓ Health check passed"
              exit 0
            fi

            if [ $i -eq 30 ]; then
              echo "✗ Health check failed after 30 attempts"
              exit 1
            fi

            sleep 10
          done

      - name: Test API version endpoint
        run: |
          RESPONSE=$(curl -s -m 10 "${{ steps.get_url.outputs.url }}/api/v1/version")
          echo "Version response: $RESPONSE"

          if echo "$RESPONSE" | jq -e '.version' > /dev/null; then
            echo "✓ Version endpoint passed"
          else
            echo "✗ Version endpoint failed"
            exit 1
          fi

      - name: Test authentication endpoint
        run: |
          # Test that auth endpoint is reachable (should return 400/401, not 500)
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            "${{ steps.get_url.outputs.url }}/api/v1/auth/login")

          if [ "$STATUS" = "400" ] || [ "$STATUS" = "401" ]; then
            echo "✓ Auth endpoint reachable (status: $STATUS)"
          else
            echo "✗ Auth endpoint returned unexpected status: $STATUS"
            exit 1
          fi

  # ===========================================================================
  # Job 7: Rollback on Failure
  # ===========================================================================
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy-kubernetes, smoke-tests]
    if: failure()
    timeout-minutes: 10

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --region=${{ env.GCP_REGION }} \
            --project=${{ secrets.GCP_PROJECT_ID }}

      - name: Rollback backend
        run: |
          echo "Rolling back backend deployment..."
          kubectl rollout undo deployment/sql-studio-backend -n ${{ env.NAMESPACE }}
          kubectl rollout status deployment/sql-studio-backend -n ${{ env.NAMESPACE }} --timeout=5m

      - name: Rollback frontend
        run: |
          echo "Rolling back frontend deployment..."
          kubectl rollout undo deployment/sql-studio-frontend -n ${{ env.NAMESPACE }}
          kubectl rollout status deployment/sql-studio-frontend -n ${{ env.NAMESPACE }} --timeout=5m

      - name: Verify rollback
        run: |
          kubectl get pods -n ${{ env.NAMESPACE }} -l app=sql-studio
          echo "Rollback completed"

  # ===========================================================================
  # Job 8: Deployment Summary
  # ===========================================================================
  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [validate, build-backend, build-frontend, migrate-database, deploy-kubernetes, smoke-tests]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Generate summary
        run: |
          echo "# Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ needs.validate.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Status" >> $GITHUB_STEP_SUMMARY
          echo "- Validation: ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Backend: ${{ needs.build-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Frontend: ${{ needs.build-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Database Migration: ${{ needs.migrate-database.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Kubernetes Deployment: ${{ needs.deploy-kubernetes.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Smoke Tests: ${{ needs.smoke-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.smoke-tests.result }}" = "success" ]; then
            echo "✅ **Deployment successful!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Service URLs:**" >> $GITHUB_STEP_SUMMARY
            echo "- Frontend: https://sql-studio.app" >> $GITHUB_STEP_SUMMARY
            echo "- API: https://api.sql-studio.app" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment failed - check logs for details**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify team (optional)
        if: always()
        run: |
          # Add Slack/Discord/email notification here
          echo "Deployment ${{ needs.smoke-tests.result }}"

# =============================================================================
# Required Secrets Configuration
# =============================================================================
# GitHub Repository Secrets (Settings > Secrets and variables > Actions):
#
# - GCP_PROJECT_ID: Google Cloud project ID
# - GCP_SA_KEY: Service account key JSON with permissions:
#   * Container Registry Admin
#   * Kubernetes Engine Developer
#   * Secret Manager Admin
# - GKE_CLUSTER_NAME: Kubernetes cluster name
# - TURSO_URL: Turso database URL
# - TURSO_AUTH_TOKEN: Turso authentication token
# - JWT_SECRET: JWT signing secret
# - RESEND_API_KEY: Resend email API key (optional)
# - RESEND_FROM_EMAIL: Sender email address (optional)
#
# =============================================================================
