name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Lint backend code
        working-directory: ./backend
        run: npm run lint

      - name: Type check
        working-directory: ./backend
        run: npm run type-check

      - name: Run unit tests
        working-directory: ./backend
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: Run integration tests
        working-directory: ./backend
        run: npm run test:integration
        env:
          NODE_ENV: test
          TEST_POSTGRES_HOST: localhost
          TEST_POSTGRES_PORT: 5432
          TEST_POSTGRES_DATABASE: testdb
          TEST_POSTGRES_USERNAME: postgres
          TEST_POSTGRES_PASSWORD: postgres
          TEST_MYSQL_HOST: localhost
          TEST_MYSQL_PORT: 3306
          TEST_MYSQL_DATABASE: testdb
          TEST_MYSQL_USERNAME: root
          TEST_MYSQL_PASSWORD: root
          TEST_REDIS_HOST: localhost
          TEST_REDIS_PORT: 6379

      - name: Run E2E tests
        working-directory: ./backend
        run: npm run test:e2e
        env:
          NODE_ENV: test

      - name: Generate coverage report
        working-directory: ./backend
        run: npm run test:coverage
        env:
          NODE_ENV: test

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Lint frontend code
        working-directory: ./frontend
        run: npm run lint

      - name: Type check
        working-directory: ./frontend
        run: npx tsc --noEmit

      - name: Run component tests
        working-directory: ./frontend
        run: npm run test:component

      - name: Run integration tests
        working-directory: ./frontend
        run: npm run test:integration

      - name: Generate coverage report
        working-directory: ./frontend
        run: npm run test:coverage

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  # E2E Tests (Full Stack)
  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install Playwright
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: Build applications
        run: |
          cd backend && npm run build
          cd ../frontend && npm run build

      - name: Start backend server
        working-directory: ./backend
        run: |
          npm start &
          sleep 10
        env:
          NODE_ENV: test
          PORT: 3000

      - name: Start frontend server
        working-directory: ./frontend
        run: |
          npm run preview &
          sleep 10
        env:
          PORT: 5173

      - name: Run E2E tests
        working-directory: ./frontend
        run: npm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:5173

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/

  # Performance Tests
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Build and start backend
        working-directory: ./backend
        run: |
          npm run build
          npm start &
          sleep 10
        env:
          NODE_ENV: production
          PORT: 3000
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb

      - name: Run load tests
        working-directory: ./backend
        run: npm run test:load
        env:
          BASE_URL: http://localhost:3000

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: backend/k6-results/

  # Security Tests
  security-test:
    name: Security Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Setup Node.js for npm audit
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Audit backend dependencies
        working-directory: ./backend
        run: npm audit --audit-level moderate

      - name: Audit frontend dependencies
        working-directory: ./frontend
        run: npm audit --audit-level moderate

  # Dependency check
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check for outdated dependencies (Backend)
        working-directory: ./backend
        run: npm outdated || true

      - name: Check for outdated dependencies (Frontend)
        working-directory: ./frontend
        run: npm outdated || true

      - name: Check for security vulnerabilities
        run: |
          cd backend && npm audit --audit-level high
          cd ../frontend && npm audit --audit-level high

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, e2e-test]
    if: always()

    steps:
      - name: Generate test summary
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.backend-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.frontend-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-test.result }} |" >> $GITHUB_STEP_SUMMARY

      - name: Check overall test status
        if: |
          needs.backend-test.result == 'failure' ||
          needs.frontend-test.result == 'failure' ||
          needs.e2e-test.result == 'failure'
        run: |
          echo "❌ Some tests failed!"
          exit 1

      - name: Success message
        if: |
          needs.backend-test.result == 'success' &&
          needs.frontend-test.result == 'success' &&
          needs.e2e-test.result == 'success'
        run: echo "✅ All tests passed!"