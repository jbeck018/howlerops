# =============================================================================
# SQL Studio - Cloud Run Deployment Workflow
# =============================================================================
# Multi-environment deployment to Google Cloud Run:
# - Production: Deploy on release tags (v1.0.0)
# - Staging: Deploy on push to main branch
# - Preview: Deploy on pull requests (per-branch environments)
# =============================================================================

name: Deploy to Cloud Run

on:
  # Production: Deploy when creating release tags
  push:
    tags:
      - 'v*.*.*'

  # Staging: Deploy on push to main
  push:
    branches:
      - main
    paths:
      - 'backend-go/**'
      - '.github/workflows/deploy-cloud-run.yml'

  # Preview: Deploy on pull requests
  pull_request:
    branches:
      - main
    paths:
      - 'backend-go/**'

  # Manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - production
          - staging
          - preview

# Only one deployment at a time per environment
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  GCP_REGION: us-central1
  SERVICE_ACCOUNT_NAME: sql-studio-backend

jobs:
  # ===========================================================================
  # Job 1: Determine Deployment Environment
  # ===========================================================================
  setup:
    name: Setup Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine-env.outputs.environment }}
      service_name: ${{ steps.determine-env.outputs.service_name }}
      branch_name: ${{ steps.determine-env.outputs.branch_name }}
      image_tag: ${{ steps.determine-env.outputs.image_tag }}

    steps:
      - name: Determine environment and configuration
        id: determine-env
        run: |
          # Determine environment based on trigger
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            ENVIRONMENT="production"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            ENVIRONMENT="preview"
          else
            ENVIRONMENT="staging"
          fi

          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT

          # Extract branch name
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            BRANCH_NAME="${BRANCH_NAME#refs/tags/}"
          fi
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

          # Sanitize branch for service name
          SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | cut -c1-50)

          # Determine service name
          case "$ENVIRONMENT" in
            production)
              SERVICE_NAME="howlerops-backend"
              ;;
            staging)
              SERVICE_NAME="howlerops-backend-staging"
              ;;
            preview)
              SERVICE_NAME="howlerops-preview-${SANITIZED_BRANCH}"
              ;;
          esac
          echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT

          # Image tag
          IMAGE_TAG="${GITHUB_SHA::7}"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

          # Summary
          echo "### Deployment Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
          echo "- **Service Name:** $SERVICE_NAME" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** $BRANCH_NAME" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag:** $IMAGE_TAG" >> $GITHUB_STEP_SUMMARY

  # ===========================================================================
  # Job 2: Run Tests
  # ===========================================================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache-dependency-path: backend-go/go.sum

      - name: Run tests
        working-directory: backend-go
        run: |
          go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: backend-go/coverage.out
          flags: backend
        continue-on-error: true

  # ===========================================================================
  # Job 3: Build and Push Docker Image
  # ===========================================================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [setup, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker gcr.io --quiet

      - name: Build and push image
        working-directory: backend-go
        run: |
          IMAGE_NAME="gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ needs.setup.outputs.service_name }}"

          docker build \
            --build-arg VERSION=${{ needs.setup.outputs.image_tag }} \
            --build-arg BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
            --build-arg GIT_COMMIT=${{ github.sha }} \
            --cache-from ${IMAGE_NAME}:latest \
            -t ${IMAGE_NAME}:${{ needs.setup.outputs.image_tag }} \
            -t ${IMAGE_NAME}:latest \
            .

          docker push ${IMAGE_NAME}:${{ needs.setup.outputs.image_tag }}
          docker push ${IMAGE_NAME}:latest

          echo "IMAGE_NAME=${IMAGE_NAME}:${{ needs.setup.outputs.image_tag }}" >> $GITHUB_ENV

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ needs.setup.outputs.service_name }}:${{ needs.setup.outputs.image_tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # ===========================================================================
  # Job 4: Deploy to Cloud Run
  # ===========================================================================
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: [setup, build]
    environment: ${{ needs.setup.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          # Set resource limits based on environment
          case "${{ needs.setup.outputs.environment }}" in
            production)
              MIN_INSTANCES=1
              MAX_INSTANCES=10
              MEMORY="512Mi"
              CPU=1
              ;;
            staging)
              MIN_INSTANCES=0
              MAX_INSTANCES=5
              MEMORY="512Mi"
              CPU=1
              ;;
            preview)
              MIN_INSTANCES=0
              MAX_INSTANCES=2
              MEMORY="256Mi"
              CPU=1
              ;;
          esac

          IMAGE_NAME="gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ needs.setup.outputs.service_name }}:${{ needs.setup.outputs.image_tag }}"

          gcloud run deploy ${{ needs.setup.outputs.service_name }} \
            --image=$IMAGE_NAME \
            --region=${{ env.GCP_REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --min-instances=$MIN_INSTANCES \
            --max-instances=$MAX_INSTANCES \
            --memory=$MEMORY \
            --cpu=$CPU \
            --concurrency=80 \
            --timeout=300s \
            --port=8500 \
            --cpu-throttling \
            --set-env-vars="ENVIRONMENT=${{ needs.setup.outputs.environment }},LOG_FORMAT=json,LOG_LEVEL=info" \
            --set-secrets="TURSO_URL=turso-url:latest,TURSO_AUTH_TOKEN=turso-auth-token:latest,RESEND_API_KEY=resend-api-key:latest,JWT_SECRET=jwt-secret:latest" \
            --service-account=${{ env.SERVICE_ACCOUNT_NAME }}@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com \
            --labels=environment=${{ needs.setup.outputs.environment }},branch=${{ needs.setup.outputs.branch_name }},managed-by=github-actions \
            --quiet

          # Get service URL
          SERVICE_URL=$(gcloud run services describe ${{ needs.setup.outputs.service_name }} \
            --region=${{ env.GCP_REGION }} \
            --format='value(status.url)')

          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT

          echo "### Deployment Successful! 🎉" >> $GITHUB_STEP_SUMMARY
          echo "**Service URL:** $SERVICE_URL" >> $GITHUB_STEP_SUMMARY

      - name: Add PR comment with preview URL
        if: needs.setup.outputs.environment == 'preview' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### 🚀 Preview Environment Deployed!

              **Service URL:** ${{ steps.deploy.outputs.service_url }}

              **Environment:** \`preview\`
              **Branch:** \`${{ needs.setup.outputs.branch_name }}\`
              **Commit:** \`${{ github.sha }}\`

              #### Quick Test:
              \`\`\`bash
              curl ${{ steps.deploy.outputs.service_url }}/health
              \`\`\`

              > 💡 This preview environment will be automatically cleaned up when the PR is closed.
              `
            })

  # ===========================================================================
  # Job 5: Smoke Tests
  # ===========================================================================
  smoke-test:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    needs: [setup, deploy]

    steps:
      - name: Wait for service to be ready
        run: sleep 15

      - name: Get service URL
        id: get-url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ needs.setup.outputs.service_name }} \
            --region=${{ env.GCP_REGION }} \
            --format='value(status.url)')
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

      - name: Test health endpoint
        run: |
          for i in {1..30}; do
            echo "Health check attempt $i/30..."

            if curl -f -s -m 10 "${{ steps.get-url.outputs.url }}/health" > /dev/null; then
              echo "✅ Health check passed"
              exit 0
            fi

            if [ $i -eq 30 ]; then
              echo "❌ Health check failed after 30 attempts"
              exit 1
            fi

            sleep 10
          done

  # ===========================================================================
  # Job 6: Cleanup Preview Environments (on PR close)
  # ===========================================================================
  cleanup-preview:
    name: Cleanup Preview Environment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Delete preview service
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | cut -c1-50)
          SERVICE_NAME="sql-studio-preview-${SANITIZED_BRANCH}"

          echo "Deleting preview service: $SERVICE_NAME"

          gcloud run services delete $SERVICE_NAME \
            --region=${{ env.GCP_REGION }} \
            --quiet || echo "Service may not exist"

          echo "### Preview Environment Cleaned Up 🧹" >> $GITHUB_STEP_SUMMARY
          echo "Deleted service: $SERVICE_NAME" >> $GITHUB_STEP_SUMMARY

# =============================================================================
# Required GitHub Secrets
# =============================================================================
# Configure these in: Settings > Secrets and variables > Actions
#
# - GCP_PROJECT_ID: Your Google Cloud project ID
# - GCP_SA_KEY: Service account JSON key with permissions:
#   * Cloud Run Admin
#   * Service Account User
#   * Secret Manager Secret Accessor
#   * Storage Admin (for GCR)
# - TURSO_URL: Turso database URL
# - TURSO_AUTH_TOKEN: Turso authentication token
# - JWT_SECRET: JWT signing secret (generate with: openssl rand -base64 32)
# - RESEND_API_KEY: Resend email API key
# =============================================================================
