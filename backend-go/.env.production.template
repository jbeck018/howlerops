# ============================================================================
# SQL Studio Backend - Production Environment Template
# ============================================================================
# IMPORTANT: Copy this file to .env.production and fill with actual values
# NEVER commit .env.production to version control!
#
# This template includes all environment variables needed for production
# deployment. Each variable includes documentation about its purpose,
# format, and how to obtain the value.
# ============================================================================

# ============================================================================
# DEPLOYMENT ENVIRONMENT
# ============================================================================

# Environment name (production, staging, development)
# This affects logging levels, error reporting, and feature flags
ENVIRONMENT=production

# ============================================================================
# SERVER CONFIGURATION
# ============================================================================

# HTTP server port (Cloud Run uses 8080 by default, can be customized)
# Note: Cloud Run will set PORT environment variable automatically
SERVER_HTTP_PORT=8080

# gRPC server port (optional, only if using gRPC)
SERVER_GRPC_PORT=9090

# Metrics server port (for Prometheus scraping)
SERVER_METRICS_PORT=9100

# Server bind address (0.0.0.0 for all interfaces)
SERVER_HOST=0.0.0.0

# Request timeout in seconds
SERVER_REQUEST_TIMEOUT=30

# Graceful shutdown timeout in seconds
SERVER_SHUTDOWN_TIMEOUT=30

# ============================================================================
# DATABASE CONFIGURATION - TURSO
# ============================================================================

# Turso database URL
# Format: libsql://[database-name]-[organization].turso.io
# Get this from: turso db show [database-name] --url
# Example: libsql://sql-studio-prod-acme.turso.io
TURSO_URL=libsql://YOUR-DATABASE-YOUR-ORG.turso.io

# Turso authentication token
# Generate with: turso db tokens create [database-name] --expiration never
# IMPORTANT: Store this securely, it grants full database access
TURSO_AUTH_TOKEN=YOUR-TURSO-AUTH-TOKEN-HERE

# Connection pool settings for production
# Adjust based on expected concurrent users and Cloud Run instance limits
TURSO_MAX_CONNECTIONS=25

# Idle connection timeout (in seconds)
TURSO_IDLE_TIMEOUT=900

# Connection max lifetime (in seconds)
TURSO_MAX_LIFETIME=1800

# ============================================================================
# AUTHENTICATION & SECURITY
# ============================================================================

# JWT signing secret - CRITICAL SECURITY SETTING
# Generate with: openssl rand -base64 64
# MUST be at least 32 characters, recommend 64+ for production
# NEVER reuse across environments or applications
JWT_SECRET=YOUR-PRODUCTION-JWT-SECRET-MINIMUM-64-CHARACTERS-REQUIRED-HERE

# JWT token expiration time
# Format: 1h, 24h, 7d, etc.
# Shorter = more secure but less convenient
JWT_EXPIRATION=24h

# JWT refresh token expiration
# Should be longer than JWT_EXPIRATION
JWT_REFRESH_EXPIRATION=168h

# Password hashing cost (bcrypt)
# Higher = more secure but slower
# Production: 12-14 recommended, 15+ for high security
BCRYPT_COST=12

# Session configuration
SESSION_TIMEOUT=24h
SESSION_COOKIE_SECURE=true
SESSION_COOKIE_HTTPONLY=true
SESSION_COOKIE_SAMESITE=strict

# Login security
MAX_LOGIN_ATTEMPTS=5
LOCKOUT_DURATION=30m
PASSWORD_MIN_LENGTH=8
REQUIRE_EMAIL_VERIFICATION=true

# ============================================================================
# EMAIL SERVICE - RESEND
# ============================================================================

# Email provider (currently only 'resend' is supported)
EMAIL_PROVIDER=resend

# Resend API key
# Get from: https://resend.com/api-keys
# Create key with 'Send' permission for production
RESEND_API_KEY=re_YOUR_RESEND_API_KEY_HERE

# Sender email address
# Must be verified domain in Resend
# Format: noreply@yourdomain.com or "App Name" <noreply@yourdomain.com>
RESEND_FROM_EMAIL=noreply@yourdomain.com

# Sender display name
RESEND_FROM_NAME=SQL Studio

# Base URL for email links (password reset, verification, etc.)
# This should be your frontend application URL
EMAIL_BASE_URL=https://yourdomain.com

# Email rate limiting (emails per minute per user)
EMAIL_RATE_LIMIT=3

# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================

# Log level (debug, info, warn, error, fatal)
# Production should typically use 'info' or 'warn'
LOG_LEVEL=info

# Log format (json, text)
# Use 'json' for production (better for log aggregation)
LOG_FORMAT=json

# Log output (stdout, stderr, file path)
# Cloud Run captures stdout/stderr automatically
LOG_OUTPUT=stdout

# Log file path (only if LOG_OUTPUT includes file)
# LOG_FILE=/var/log/sql-studio/app.log

# Include caller information in logs (file:line)
LOG_CALLER=false

# Include stack trace for errors
LOG_STACK_TRACE=true

# Sample rate for trace logging (0.0-1.0)
# 0.1 = 10% of requests logged with trace level detail
LOG_TRACE_SAMPLE_RATE=0.1

# ============================================================================
# SYNC SERVICE CONFIGURATION
# ============================================================================

# Enable sync service
SYNC_ENABLED=true

# Maximum upload size in bytes (10MB default)
SYNC_MAX_UPLOAD_SIZE=10485760

# Conflict resolution strategy
# Options: last_write_wins, client_wins, server_wins, manual
SYNC_CONFLICT_STRATEGY=last_write_wins

# Data retention period in days
# How long to keep sync history and deleted items
SYNC_RETENTION_DAYS=90

# Maximum history items per workspace
SYNC_MAX_HISTORY_ITEMS=1000

# Enable SQL sanitization for security
SYNC_ENABLE_SANITIZATION=true

# Rate limiting for sync operations (requests per minute)
SYNC_RATE_LIMIT_RPM=10

# Compression for sync payloads
SYNC_ENABLE_COMPRESSION=true

# ============================================================================
# CORS CONFIGURATION
# ============================================================================

# Enable CORS
CORS_ENABLED=true

# Allowed origins (comma-separated)
# Use specific domains in production, avoid wildcards
# Example: https://app.yourdomain.com,https://www.yourdomain.com
CORS_ORIGINS=https://yourdomain.com,https://www.yourdomain.com

# Allowed methods
CORS_METHODS=GET,POST,PUT,DELETE,OPTIONS

# Allowed headers
CORS_HEADERS=Content-Type,Authorization,X-Request-ID

# Allow credentials
CORS_CREDENTIALS=true

# Max age for preflight cache (in seconds)
CORS_MAX_AGE=86400

# ============================================================================
# RATE LIMITING
# ============================================================================

# Enable rate limiting
RATE_LIMIT_ENABLED=true

# Global rate limit (requests per second)
RATE_LIMIT_RPS=100

# Burst size (maximum requests in a burst)
RATE_LIMIT_BURST=200

# Per-user rate limit (if authenticated)
RATE_LIMIT_USER_RPS=50
RATE_LIMIT_USER_BURST=100

# IP-based rate limiting
RATE_LIMIT_IP_RPS=20
RATE_LIMIT_IP_BURST=40

# Rate limit by endpoint (JSON format)
# RATE_LIMIT_ENDPOINTS='{"POST /api/auth/signup":{"rps":1,"burst":2}}'

# ============================================================================
# REDIS CONFIGURATION (Optional but recommended for production)
# ============================================================================

# Enable Redis for caching and rate limiting
REDIS_ENABLED=false

# Redis connection string
# For Redis Cloud: redis://user:password@host:port
# For Memorystore: REDIS_HOST only
REDIS_HOST=your-redis-host
REDIS_PORT=6379
REDIS_PASSWORD=your-redis-password
REDIS_DATABASE=0

# Redis connection pool
REDIS_MAX_CONNECTIONS=50
REDIS_MIN_IDLE_CONNECTIONS=10

# Redis timeouts (in seconds)
REDIS_CONNECT_TIMEOUT=5
REDIS_READ_TIMEOUT=3
REDIS_WRITE_TIMEOUT=3

# ============================================================================
# METRICS AND MONITORING
# ============================================================================

# Enable metrics endpoint
METRICS_ENABLED=true

# Metrics path
METRICS_PATH=/metrics

# Enable distributed tracing
TRACING_ENABLED=false

# Tracing provider (jaeger, zipkin, gcp)
# TRACING_PROVIDER=gcp

# Tracing sample rate (0.0-1.0)
# TRACING_SAMPLE_RATE=0.01

# ============================================================================
# SECURITY HEADERS
# ============================================================================

# Content Security Policy
CSP_POLICY=default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';

# Strict Transport Security (HSTS)
HSTS_MAX_AGE=31536000
HSTS_INCLUDE_SUBDOMAINS=true
HSTS_PRELOAD=true

# Other security headers
X_FRAME_OPTIONS=DENY
X_CONTENT_TYPE_OPTIONS=nosniff
X_XSS_PROTECTION=1; mode=block
REFERRER_POLICY=strict-origin-when-cross-origin

# ============================================================================
# FEATURE FLAGS
# ============================================================================

# Enable/disable specific features
FEATURE_SIGNUP_ENABLED=true
FEATURE_SOCIAL_AUTH=false
FEATURE_TWO_FACTOR_AUTH=false
FEATURE_API_KEYS=false
FEATURE_WEBHOOKS=false
FEATURE_AUDIT_LOG=true

# ============================================================================
# PERFORMANCE TUNING
# ============================================================================

# HTTP server settings
HTTP_READ_TIMEOUT=30s
HTTP_WRITE_TIMEOUT=30s
HTTP_IDLE_TIMEOUT=120s
HTTP_MAX_HEADER_BYTES=1048576

# Database query timeout (in seconds)
DB_QUERY_TIMEOUT=30

# Cache TTL settings (in seconds)
CACHE_TTL_DEFAULT=300
CACHE_TTL_USER=600
CACHE_TTL_SESSION=3600

# ============================================================================
# CLOUD PLATFORM SPECIFIC
# ============================================================================

# Google Cloud Project ID (for GCP deployments)
GCP_PROJECT_ID=your-project-id

# AWS Region (for AWS deployments)
# AWS_REGION=us-east-1

# Azure specific settings
# AZURE_SUBSCRIPTION_ID=your-subscription-id

# ============================================================================
# BACKUP AND MAINTENANCE
# ============================================================================

# Maintenance mode
MAINTENANCE_MODE=false
MAINTENANCE_MESSAGE=System under maintenance. Please try again later.

# Backup settings
BACKUP_ENABLED=false
BACKUP_SCHEDULE=0 2 * * *
BACKUP_RETENTION_DAYS=30

# ============================================================================
# THIRD-PARTY INTEGRATIONS (Optional)
# ============================================================================

# Sentry error tracking
# SENTRY_DSN=https://your-key@sentry.io/project-id
# SENTRY_ENVIRONMENT=production
# SENTRY_SAMPLE_RATE=0.1

# Analytics
# GOOGLE_ANALYTICS_ID=GA-XXXXXXXXX
# MIXPANEL_TOKEN=your-mixpanel-token

# ============================================================================
# NOTES AND BEST PRACTICES
# ============================================================================
#
# 1. SECURITY:
#    - Generate strong, unique secrets for production
#    - Never reuse secrets across environments
#    - Rotate secrets regularly (at least quarterly)
#    - Use Secret Manager for sensitive values
#
# 2. PERFORMANCE:
#    - Adjust connection pools based on load testing
#    - Monitor and tune rate limits based on actual usage
#    - Enable Redis for better performance at scale
#
# 3. MONITORING:
#    - Set up alerts for all critical metrics
#    - Monitor error rates, latency, and resource usage
#    - Keep logs for at least 30 days
#
# 4. COMPLIANCE:
#    - Ensure email service complies with CAN-SPAM/GDPR
#    - Implement audit logging for sensitive operations
#    - Document data retention policies
#
# 5. DEPLOYMENT:
#    - Always test configuration in staging first
#    - Keep backups of working configurations
#    - Document any custom settings
#
# ============================================================================