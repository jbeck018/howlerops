// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: ai_service.proto

package ai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AIService_GenerateSQL_FullMethodName       = "/ai.AIService/GenerateSQL"
	AIService_FixSQL_FullMethodName            = "/ai.AIService/FixSQL"
	AIService_GetProviders_FullMethodName      = "/ai.AIService/GetProviders"
	AIService_GetProviderHealth_FullMethodName = "/ai.AIService/GetProviderHealth"
	AIService_GetProviderModels_FullMethodName = "/ai.AIService/GetProviderModels"
	AIService_TestProvider_FullMethodName      = "/ai.AIService/TestProvider"
	AIService_GetUsageStats_FullMethodName     = "/ai.AIService/GetUsageStats"
	AIService_GetConfig_FullMethodName         = "/ai.AIService/GetConfig"
)

// AIServiceClient is the client API for AIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIServiceClient interface {
	// Generate SQL from natural language
	GenerateSQL(ctx context.Context, in *GenerateSQLRequest, opts ...grpc.CallOption) (*GenerateSQLResponse, error)
	// Fix SQL based on error message
	FixSQL(ctx context.Context, in *FixSQLRequest, opts ...grpc.CallOption) (*FixSQLResponse, error)
	// Get available providers
	GetProviders(ctx context.Context, in *GetProvidersRequest, opts ...grpc.CallOption) (*GetProvidersResponse, error)
	// Get provider health status
	GetProviderHealth(ctx context.Context, in *GetProviderHealthRequest, opts ...grpc.CallOption) (*ProviderHealthResponse, error)
	// Get available models for a provider
	GetProviderModels(ctx context.Context, in *GetProviderModelsRequest, opts ...grpc.CallOption) (*GetProviderModelsResponse, error)
	// Test provider configuration
	TestProvider(ctx context.Context, in *TestProviderRequest, opts ...grpc.CallOption) (*TestProviderResponse, error)
	// Get usage statistics
	GetUsageStats(ctx context.Context, in *GetUsageStatsRequest, opts ...grpc.CallOption) (*GetUsageStatsResponse, error)
	// Get AI service configuration
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
}

type aIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIServiceClient(cc grpc.ClientConnInterface) AIServiceClient {
	return &aIServiceClient{cc}
}

func (c *aIServiceClient) GenerateSQL(ctx context.Context, in *GenerateSQLRequest, opts ...grpc.CallOption) (*GenerateSQLResponse, error) {
	out := new(GenerateSQLResponse)
	err := c.cc.Invoke(ctx, AIService_GenerateSQL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) FixSQL(ctx context.Context, in *FixSQLRequest, opts ...grpc.CallOption) (*FixSQLResponse, error) {
	out := new(FixSQLResponse)
	err := c.cc.Invoke(ctx, AIService_FixSQL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) GetProviders(ctx context.Context, in *GetProvidersRequest, opts ...grpc.CallOption) (*GetProvidersResponse, error) {
	out := new(GetProvidersResponse)
	err := c.cc.Invoke(ctx, AIService_GetProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) GetProviderHealth(ctx context.Context, in *GetProviderHealthRequest, opts ...grpc.CallOption) (*ProviderHealthResponse, error) {
	out := new(ProviderHealthResponse)
	err := c.cc.Invoke(ctx, AIService_GetProviderHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) GetProviderModels(ctx context.Context, in *GetProviderModelsRequest, opts ...grpc.CallOption) (*GetProviderModelsResponse, error) {
	out := new(GetProviderModelsResponse)
	err := c.cc.Invoke(ctx, AIService_GetProviderModels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) TestProvider(ctx context.Context, in *TestProviderRequest, opts ...grpc.CallOption) (*TestProviderResponse, error) {
	out := new(TestProviderResponse)
	err := c.cc.Invoke(ctx, AIService_TestProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) GetUsageStats(ctx context.Context, in *GetUsageStatsRequest, opts ...grpc.CallOption) (*GetUsageStatsResponse, error) {
	out := new(GetUsageStatsResponse)
	err := c.cc.Invoke(ctx, AIService_GetUsageStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, AIService_GetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIServiceServer is the server API for AIService service.
// All implementations must embed UnimplementedAIServiceServer
// for forward compatibility
type AIServiceServer interface {
	// Generate SQL from natural language
	GenerateSQL(context.Context, *GenerateSQLRequest) (*GenerateSQLResponse, error)
	// Fix SQL based on error message
	FixSQL(context.Context, *FixSQLRequest) (*FixSQLResponse, error)
	// Get available providers
	GetProviders(context.Context, *GetProvidersRequest) (*GetProvidersResponse, error)
	// Get provider health status
	GetProviderHealth(context.Context, *GetProviderHealthRequest) (*ProviderHealthResponse, error)
	// Get available models for a provider
	GetProviderModels(context.Context, *GetProviderModelsRequest) (*GetProviderModelsResponse, error)
	// Test provider configuration
	TestProvider(context.Context, *TestProviderRequest) (*TestProviderResponse, error)
	// Get usage statistics
	GetUsageStats(context.Context, *GetUsageStatsRequest) (*GetUsageStatsResponse, error)
	// Get AI service configuration
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	mustEmbedUnimplementedAIServiceServer()
}

// UnimplementedAIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAIServiceServer struct {
}

func (UnimplementedAIServiceServer) GenerateSQL(context.Context, *GenerateSQLRequest) (*GenerateSQLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSQL not implemented")
}
func (UnimplementedAIServiceServer) FixSQL(context.Context, *FixSQLRequest) (*FixSQLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FixSQL not implemented")
}
func (UnimplementedAIServiceServer) GetProviders(context.Context, *GetProvidersRequest) (*GetProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviders not implemented")
}
func (UnimplementedAIServiceServer) GetProviderHealth(context.Context, *GetProviderHealthRequest) (*ProviderHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderHealth not implemented")
}
func (UnimplementedAIServiceServer) GetProviderModels(context.Context, *GetProviderModelsRequest) (*GetProviderModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderModels not implemented")
}
func (UnimplementedAIServiceServer) TestProvider(context.Context, *TestProviderRequest) (*TestProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestProvider not implemented")
}
func (UnimplementedAIServiceServer) GetUsageStats(context.Context, *GetUsageStatsRequest) (*GetUsageStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsageStats not implemented")
}
func (UnimplementedAIServiceServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedAIServiceServer) mustEmbedUnimplementedAIServiceServer() {}

// UnsafeAIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIServiceServer will
// result in compilation errors.
type UnsafeAIServiceServer interface {
	mustEmbedUnimplementedAIServiceServer()
}

func RegisterAIServiceServer(s grpc.ServiceRegistrar, srv AIServiceServer) {
	s.RegisterService(&AIService_ServiceDesc, srv)
}

func _AIService_GenerateSQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).GenerateSQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_GenerateSQL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).GenerateSQL(ctx, req.(*GenerateSQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_FixSQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FixSQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).FixSQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_FixSQL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).FixSQL(ctx, req.(*FixSQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_GetProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).GetProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_GetProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).GetProviders(ctx, req.(*GetProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_GetProviderHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).GetProviderHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_GetProviderHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).GetProviderHealth(ctx, req.(*GetProviderHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_GetProviderModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).GetProviderModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_GetProviderModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).GetProviderModels(ctx, req.(*GetProviderModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_TestProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).TestProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_TestProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).TestProvider(ctx, req.(*TestProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_GetUsageStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsageStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).GetUsageStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_GetUsageStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).GetUsageStats(ctx, req.(*GetUsageStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AIService_ServiceDesc is the grpc.ServiceDesc for AIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.AIService",
	HandlerType: (*AIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateSQL",
			Handler:    _AIService_GenerateSQL_Handler,
		},
		{
			MethodName: "FixSQL",
			Handler:    _AIService_FixSQL_Handler,
		},
		{
			MethodName: "GetProviders",
			Handler:    _AIService_GetProviders_Handler,
		},
		{
			MethodName: "GetProviderHealth",
			Handler:    _AIService_GetProviderHealth_Handler,
		},
		{
			MethodName: "GetProviderModels",
			Handler:    _AIService_GetProviderModels_Handler,
		},
		{
			MethodName: "TestProvider",
			Handler:    _AIService_TestProvider_Handler,
		},
		{
			MethodName: "GetUsageStats",
			Handler:    _AIService_GetUsageStats_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _AIService_GetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ai_service.proto",
}
