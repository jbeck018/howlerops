# =============================================================================
# Google Cloud Run Service Definition (Declarative)
# =============================================================================
# This is a declarative service definition for Cloud Run.
# Use this for GitOps-style deployments or to version control your infrastructure.
#
# Deploy with:
#   gcloud run services replace cloudrun.yaml --region=us-central1
#
# Note: Replace PROJECT_ID with your actual GCP project ID before deploying
# =============================================================================

apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: sql-studio-backend
  labels:
    app: sql-studio
    component: backend
    managed-by: cloud-run
  annotations:
    # Cloud Run annotations for configuration
    run.googleapis.com/launch-stage: BETA
    run.googleapis.com/ingress: all
    run.googleapis.com/ingress-status: all
spec:
  template:
    metadata:
      annotations:
        # Autoscaling configuration
        autoscaling.knative.dev/minScale: '0'  # Scale to zero when no traffic
        autoscaling.knative.dev/maxScale: '10'  # Maximum instances
        # CPU and memory limits
        run.googleapis.com/cpu-throttling: 'true'  # CPU only during requests
        run.googleapis.com/startup-cpu-boost: 'true'  # Boost CPU during startup
        # Execution environment
        run.googleapis.com/execution-environment: gen2  # Second generation execution environment
        # VPC configuration (uncomment if using VPC connector)
        # run.googleapis.com/vpc-access-connector: projects/PROJECT_ID/locations/us-central1/connectors/sql-studio-connector
        # run.googleapis.com/vpc-access-egress: private-ranges-only
    spec:
      # Service account for the container
      serviceAccountName: sql-studio-backend@PROJECT_ID.iam.gserviceaccount.com

      # Maximum request timeout (5 minutes)
      timeoutSeconds: 300

      # Container concurrency (requests per instance)
      containerConcurrency: 80

      containers:
        - name: sql-studio-backend
          # Container image (replace PROJECT_ID)
          image: gcr.io/PROJECT_ID/sql-studio-backend:latest

          # Ports configuration
          ports:
            - name: http1
              containerPort: 8500
              protocol: TCP

          # Environment variables
          env:
            - name: ENVIRONMENT
              value: production
            - name: SERVER_HTTP_PORT
              value: '8500'
            - name: SERVER_GRPC_PORT
              value: '9500'
            - name: METRICS_PORT
              value: '9100'
            - name: LOG_LEVEL
              value: info
            - name: LOG_FORMAT
              value: json
            - name: LOG_OUTPUT
              value: stdout

            # Secrets from Secret Manager
            - name: TURSO_URL
              valueFrom:
                secretKeyRef:
                  name: turso-url
                  key: latest
            - name: TURSO_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: turso-auth-token
                  key: latest
            - name: RESEND_API_KEY
              valueFrom:
                secretKeyRef:
                  name: resend-api-key
                  key: latest
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: jwt-secret
                  key: latest

          # Resource limits and requests
          resources:
            limits:
              # Maximum memory (Cloud Run pricing tier)
              memory: 512Mi
              # Maximum CPU (1 vCPU)
              cpu: '1'
            requests:
              # Minimum guaranteed resources
              memory: 256Mi
              cpu: '0.5'

          # Startup probe (for slow-starting containers)
          startupProbe:
            httpGet:
              path: /health
              port: 8500
              httpHeaders:
                - name: User-Agent
                  value: GoogleHC/1.0
            initialDelaySeconds: 0
            periodSeconds: 3
            timeoutSeconds: 3
            failureThreshold: 10
            successThreshold: 1

          # Liveness probe (restart if unhealthy)
          livenessProbe:
            httpGet:
              path: /health
              port: 8500
              httpHeaders:
                - name: User-Agent
                  value: GoogleHC/1.0
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1

          # Readiness probe (remove from load balancer if not ready)
          # Not needed for Cloud Run, but included for completeness
          # readinessProbe:
          #   httpGet:
          #     path: /health
          #     port: 8500
          #   initialDelaySeconds: 10
          #   periodSeconds: 5
          #   timeoutSeconds: 3
          #   failureThreshold: 3
          #   successThreshold: 1

---
# =============================================================================
# IAM Policy for Cloud Run Service
# =============================================================================
# This grants public access to the service.
# Remove or modify for authentication requirements.
#
# Apply with:
#   gcloud run services set-iam-policy sql-studio-backend policy.yaml --region=us-central1
# =============================================================================
# apiVersion: v1
# kind: Policy
# metadata:
#   name: sql-studio-backend
# spec:
#   bindings:
#     - role: roles/run.invoker
#       members:
#         - allUsers  # Public access
