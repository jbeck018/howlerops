// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT
import {services} from '../models';
import {main} from '../models';
import {time} from '../models';
import {database} from '../models';
import {storage} from '../models';

export function AddKeyboardBinding(arg1:string,arg2:services.KeyboardAction):Promise<void>;

export function CancelQueryStream(arg1:string):Promise<void>;

export function ClearAIMemorySessions():Promise<void>;

export function ClearRecentFiles():Promise<void>;

export function ConfigureAIProvider(arg1:main.ProviderConfig):Promise<void>;

export function CopyFile(arg1:string,arg2:string):Promise<void>;

export function CreateConnection(arg1:main.ConnectionRequest):Promise<main.ConnectionInfo>;

export function CreateDirectory(arg1:string):Promise<void>;

export function CreateTempFile(arg1:string,arg2:string,arg3:string):Promise<string>;

export function DeleteAIMemorySession(arg1:string):Promise<void>;

export function DeleteFile(arg1:string):Promise<void>;

export function DeletePassword(arg1:string):Promise<void>;

export function DeleteSyntheticView(arg1:string):Promise<void>;

export function ExecuteMultiDatabaseQuery(arg1:main.MultiQueryRequest):Promise<main.MultiQueryResponse>;

export function ExecuteQuery(arg1:main.QueryRequest):Promise<main.QueryResponse>;

export function ExecuteQueryStream(arg1:string,arg2:string,arg3:number):Promise<string>;

export function ExecuteReadOnlyQuery(arg1:string,arg2:string,arg3:number,arg4:time.Duration):Promise<main.ReadOnlyQueryResult>;

export function ExecuteSyntheticQuery(arg1:string):Promise<main.QueryResponse>;

export function ExplainQuery(arg1:string,arg2:string):Promise<string>;

export function ExportKeyboardBindings():Promise<Record<string, services.KeyboardAction>>;

export function FileExists(arg1:string):Promise<boolean>;

export function FixSQLError(arg1:string,arg2:string,arg3:string):Promise<main.FixedSQLResponse>;

export function FixSQLErrorWithOptions(arg1:main.FixSQLRequest):Promise<main.FixedSQLResponse>;

export function GenerateSQLFromNaturalLanguage(arg1:main.NLQueryRequest):Promise<main.GeneratedSQLResponse>;

export function GenericChat(arg1:main.GenericChatRequest):Promise<main.GenericChatResponse>;

export function GetAIConfiguration():Promise<main.ProviderConfig>;

export function GetAIProviderStatus():Promise<Record<string, main.ProviderStatus>>;

export function GetAllKeyboardBindings():Promise<Record<string, services.KeyboardAction>>;

export function GetAppIcon():Promise<Array<number>>;

export function GetAppVersion():Promise<string>;

export function GetAvailableEnvironments():Promise<Array<string>>;

export function GetConnectionCount():Promise<number>;

export function GetConnectionHealth(arg1:string):Promise<database.HealthStatus>;

export function GetConnectionIDs():Promise<Array<string>>;

export function GetConnectionStats():Promise<Record<string, database.PoolStats>>;

export function GetDarkIcon():Promise<Array<number>>;

export function GetDatabaseTypeInfo(arg1:string):Promise<Record<string, any>>;

export function GetDatabaseVersion(arg1:string):Promise<string>;

export function GetDownloadsPath():Promise<string>;

export function GetEditableMetadata(arg1:string):Promise<main.EditableMetadataJobResponse>;

export function GetFileInfo(arg1:string):Promise<services.FileInfo>;

export function GetHomePath():Promise<string>;

export function GetKeyboardBindingsByCategory():Promise<Record<string, Array<services.KeyboardAction>>>;

export function GetLightIcon():Promise<Array<number>>;

export function GetMultiConnectionSchema(arg1:Array<string>):Promise<main.CombinedSchema>;

export function GetPassword(arg1:string):Promise<string>;

export function GetQuerySuggestions(arg1:string,arg2:string):Promise<Array<main.Suggestion>>;

export function GetRecentFiles():Promise<Array<services.RecentFile>>;

export function GetSchemaCacheStats():Promise<Record<string, any>>;

export function GetSchemas(arg1:string):Promise<Array<string>>;

export function GetSupportedDatabaseTypes():Promise<Array<string>>;

export function GetSyntheticSchema():Promise<Record<string, any>>;

export function GetSyntheticView(arg1:string):Promise<storage.ViewDefinition>;

export function GetTableStructure(arg1:string,arg2:string,arg3:string):Promise<database.TableStructure>;

export function GetTables(arg1:string,arg2:string):Promise<Array<main.TableInfo>>;

export function GetTempDir():Promise<string>;

export function GetWorkspaceFiles(arg1:string,arg2:Array<string>):Promise<Array<services.FileInfo>>;

export function HandleKeyboardEvent(arg1:services.KeyboardEvent):Promise<void>;

export function HasPassword(arg1:string):Promise<boolean>;

export function HealthCheckAll():Promise<Record<string, database.HealthStatus>>;

export function ImportKeyboardBindings(arg1:Record<string, services.KeyboardAction>):Promise<void>;

export function InvalidateAllSchemas():Promise<void>;

export function InvalidateSchemaCache(arg1:string):Promise<void>;

export function ListConnections():Promise<Array<string>>;

export function ListSyntheticViews():Promise<Array<storage.ViewSummary>>;

export function LoadAIMemorySessions():Promise<Array<main.AIMemorySessionPayload>>;

export function OpenFileDialog():Promise<string>;

export function OptimizeQuery(arg1:string,arg2:string):Promise<main.OptimizationResponse>;

export function ParseQueryConnections(arg1:string):Promise<Array<string>>;

export function ReadFile(arg1:string):Promise<string>;

export function RecallAIMemorySessions(arg1:string,arg2:number):Promise<Array<main.AIMemoryRecallResult>>;

export function RefreshSchema(arg1:string):Promise<void>;

export function RemoveConnection(arg1:string):Promise<void>;

export function RemoveFromRecentFiles(arg1:string):Promise<void>;

export function RemoveKeyboardBinding(arg1:string):Promise<void>;

export function ResetKeyboardBindings():Promise<void>;

export function SaveAIMemorySessions(arg1:Array<main.AIMemorySessionPayload>):Promise<void>;

export function SaveFileDialog():Promise<string>;

export function SaveSyntheticView(arg1:storage.ViewDefinition):Promise<string>;

export function SaveToDownloads(arg1:string,arg2:string):Promise<string>;

export function ShowErrorDialog(arg1:string,arg2:string):Promise<void>;

export function ShowInfoDialog(arg1:string,arg2:string):Promise<void>;

export function ShowNotification(arg1:string,arg2:string,arg3:boolean):Promise<void>;

export function ShowQuestionDialog(arg1:string,arg2:string):Promise<boolean>;

export function StartClaudeCodeLogin(arg1:string):Promise<main.AITestResponse>;

export function StartCodexLogin(arg1:string):Promise<main.AITestResponse>;

export function StorePassword(arg1:string,arg2:string):Promise<void>;

export function StreamAIQueryAgent(arg1:main.AIQueryAgentRequest):Promise<main.AIQueryAgentResponse>;

export function SuggestVisualization(arg1:main.ResultData):Promise<main.VizSuggestion>;

export function TestAIProvider(arg1:main.ProviderConfig):Promise<main.ProviderStatus>;

export function TestAnthropicConnection(arg1:string,arg2:string):Promise<main.AITestResponse>;

export function TestClaudeCodeConnection(arg1:string,arg2:string):Promise<main.AITestResponse>;

export function TestCodexConnection(arg1:string,arg2:string,arg3:string):Promise<main.AITestResponse>;

export function TestConnection(arg1:main.ConnectionRequest):Promise<void>;

export function TestHuggingFaceConnection(arg1:string,arg2:string):Promise<main.AITestResponse>;

export function TestOllamaConnection(arg1:string,arg2:string):Promise<main.AITestResponse>;

export function TestOpenAIConnection(arg1:string,arg2:string):Promise<main.AITestResponse>;

export function UpdateQueryRow(arg1:main.QueryRowUpdateRequest):Promise<main.QueryRowUpdateResponse>;

export function ValidateMultiQuery(arg1:string):Promise<main.ValidationResult>;

export function WriteFile(arg1:string,arg2:string):Promise<void>;
