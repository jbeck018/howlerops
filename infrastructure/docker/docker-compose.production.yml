# =============================================================================
# SQL Studio - Production Docker Compose
# =============================================================================
# Production-like local deployment for testing
# NOT recommended for actual production (use Kubernetes instead)
# =============================================================================

version: '3.9'

services:
  # Backend API Service
  backend:
    build:
      context: ../../backend-go
      dockerfile: ../infrastructure/docker/backend.Dockerfile
      args:
        VERSION: ${VERSION:-dev}
        BUILD_TIME: ${BUILD_TIME:-now}
        GIT_COMMIT: ${GIT_COMMIT:-unknown}
    image: sql-studio-backend:${VERSION:-latest}
    container_name: sql-studio-backend
    restart: unless-stopped

    ports:
      - "8500:8500"  # HTTP API
      - "9100:9100"  # Metrics

    environment:
      # Server configuration
      SERVER_HTTP_PORT: 8500
      SERVER_GRPC_PORT: 9500
      METRICS_PORT: 9100
      ENVIRONMENT: production

      # Logging
      LOG_LEVEL: info
      LOG_FORMAT: json
      LOG_OUTPUT: stdout

      # Database (from .env file)
      TURSO_URL: ${TURSO_URL}
      TURSO_AUTH_TOKEN: ${TURSO_AUTH_TOKEN}

      # Authentication
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: 24h
      JWT_REFRESH_EXPIRATION: 168h

      # Email (optional)
      RESEND_API_KEY: ${RESEND_API_KEY:-}
      RESEND_FROM_EMAIL: ${RESEND_FROM_EMAIL:-}

      # Features
      FEATURE_EMAIL_AUTH: "true"
      FEATURE_CLOUD_SYNC: "true"

      # Rate limiting
      RATE_LIMIT_ENABLED: "true"
      RATE_LIMIT_REQUESTS_PER_MINUTE: 60

      # CORS
      CORS_ALLOWED_ORIGINS: "http://localhost:3000,http://localhost:80"

    volumes:
      - backend-logs:/app/logs
      - backend-data:/app/data

    networks:
      - sql-studio

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8500/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M

    security_opt:
      - no-new-privileges:true

    read_only: false

    user: "1001:1001"

  # Frontend Web Service
  frontend:
    build:
      context: ../../frontend
      dockerfile: ../infrastructure/docker/frontend.Dockerfile
    image: sql-studio-frontend:${VERSION:-latest}
    container_name: sql-studio-frontend
    restart: unless-stopped

    ports:
      - "80:80"

    environment:
      BACKEND_API_URL: http://backend:8500
      ENVIRONMENT: production

    networks:
      - sql-studio

    depends_on:
      backend:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 512M
        reservations:
          cpus: '0.05'
          memory: 128M

    security_opt:
      - no-new-privileges:true

    read_only: true

    user: "101:101"  # nginx user

  # Prometheus (monitoring - optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: sql-studio-prometheus
    restart: unless-stopped

    ports:
      - "9090:9090"

    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

    networks:
      - sql-studio

    depends_on:
      - backend

    profiles:
      - monitoring

  # Grafana (dashboards - optional)
  grafana:
    image: grafana/grafana:latest
    container_name: sql-studio-grafana
    restart: unless-stopped

    ports:
      - "3001:3000"

    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_ROOT_URL: http://localhost:3001
      GF_INSTALL_PLUGINS: grafana-piechart-panel

    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro

    networks:
      - sql-studio

    depends_on:
      - prometheus

    profiles:
      - monitoring

  # nginx Load Balancer (optional - for multi-instance)
  loadbalancer:
    image: nginx:1.25-alpine
    container_name: sql-studio-lb
    restart: unless-stopped

    ports:
      - "8080:80"

    volumes:
      - ./load-balancing/nginx-lb.conf:/etc/nginx/nginx.conf:ro

    networks:
      - sql-studio

    depends_on:
      - backend
      - frontend

    profiles:
      - loadbalancer

# Networks
networks:
  sql-studio:
    name: sql-studio-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  backend-logs:
    name: sql-studio-backend-logs
  backend-data:
    name: sql-studio-backend-data
  prometheus-data:
    name: sql-studio-prometheus-data
  grafana-data:
    name: sql-studio-grafana-data

# =============================================================================
# Usage Instructions
# =============================================================================
#
# 1. Create .env file with required secrets:
#    cp .env.example .env
#    # Edit .env with your values
#
# 2. Build images:
#    docker-compose -f docker-compose.production.yml build
#
# 3. Start services:
#    docker-compose -f docker-compose.production.yml up -d
#
# 4. Start with monitoring:
#    docker-compose -f docker-compose.production.yml --profile monitoring up -d
#
# 5. View logs:
#    docker-compose -f docker-compose.production.yml logs -f
#
# 6. Check status:
#    docker-compose -f docker-compose.production.yml ps
#
# 7. Stop services:
#    docker-compose -f docker-compose.production.yml down
#
# 8. Stop and remove volumes:
#    docker-compose -f docker-compose.production.yml down -v
#
# 9. Scale backend (requires load balancer):
#    docker-compose -f docker-compose.production.yml up -d --scale backend=3
#
# 10. Access services:
#     Frontend: http://localhost
#     Backend API: http://localhost:8500
#     Prometheus: http://localhost:9090 (with --profile monitoring)
#     Grafana: http://localhost:3001 (with --profile monitoring)
#
# =============================================================================
# Environment Variables (.env file)
# =============================================================================
#
# VERSION=1.0.0
# BUILD_TIME=2024-01-01T00:00:00Z
# GIT_COMMIT=abc123
#
# TURSO_URL=libsql://your-database.turso.io
# TURSO_AUTH_TOKEN=your-turso-token
# JWT_SECRET=your-64-character-secret
# RESEND_API_KEY=re_your_key
# RESEND_FROM_EMAIL=noreply@sql-studio.app
# GRAFANA_PASSWORD=secure-password
#
# =============================================================================
