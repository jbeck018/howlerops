# =============================================================================
# SQL Studio - Cache Control Configuration
# =============================================================================
# nginx cache headers for different file types and content
# Include this in your nginx server block
# =============================================================================

# =============================================================================
# HTML Files - No Cache
# =============================================================================
# SPA entry point should never be cached to ensure users get latest version
location ~* \.html$ {
    expires -1;
    add_header Cache-Control "no-cache, no-store, must-revalidate, proxy-revalidate";
    add_header Pragma "no-cache";
    add_header Last-Modified $date_gmt;
    if_modified_since off;
    etag off;
}

# =============================================================================
# JavaScript and CSS with Hashed Filenames - Immutable Long Cache
# =============================================================================
# Files with hashes in name can be cached forever
# e.g., main.abc123.js, styles.def456.css
location ~* ^/assets/.*\.(js|css)$ {
    expires 1y;
    add_header Cache-Control "public, immutable, max-age=31536000";
    access_log off;

    # Enable gzip static if pre-compressed files exist
    gzip_static on;

    # Add CORS headers for cross-origin requests
    add_header Access-Control-Allow-Origin "*";
    add_header Timing-Allow-Origin "*";

    # Prevent transformation by proxies
    add_header Cache-Control "public, immutable, no-transform";
}

# =============================================================================
# JavaScript and CSS without Hashing - Short Cache
# =============================================================================
# Legacy JS/CSS without hashes need shorter cache with revalidation
location ~* \.(js|css)$ {
    expires 1h;
    add_header Cache-Control "public, max-age=3600, must-revalidate";
    etag on;
}

# =============================================================================
# Images - Long Cache with Revalidation
# =============================================================================
location ~* \.(png|jpg|jpeg|gif|webp|avif|svg)$ {
    expires 30d;
    add_header Cache-Control "public, max-age=2592000, stale-while-revalidate=86400";
    access_log off;

    # Allow CORS for images
    add_header Access-Control-Allow-Origin "*";

    # Enable image optimization headers
    add_header Vary "Accept-Encoding, Accept";
}

# =============================================================================
# Fonts - Immutable Long Cache
# =============================================================================
location ~* \.(woff|woff2|ttf|eot|otf)$ {
    expires 1y;
    add_header Cache-Control "public, immutable, max-age=31536000";
    access_log off;

    # CORS required for cross-origin font loading
    add_header Access-Control-Allow-Origin "*";
    add_header Access-Control-Allow-Methods "GET, OPTIONS";
    add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range";

    # Handle OPTIONS preflight
    if ($request_method = 'OPTIONS') {
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Max-Age 1728000;
        add_header Content-Type "text/plain charset=UTF-8";
        add_header Content-Length 0;
        return 204;
    }
}

# =============================================================================
# Icons - Long Cache
# =============================================================================
location ~* \.(ico|cur)$ {
    expires 7d;
    add_header Cache-Control "public, max-age=604800";
    access_log off;
}

# =============================================================================
# Media Files - Long Cache
# =============================================================================
location ~* \.(mp4|webm|ogg|mp3|wav|flac|aac|m4a)$ {
    expires 30d;
    add_header Cache-Control "public, max-age=2592000";
    access_log off;

    # Enable range requests for media
    add_header Accept-Ranges bytes;
}

# =============================================================================
# Documents - Short Cache
# =============================================================================
location ~* \.(pdf|doc|docx|xls|xlsx|ppt|pptx)$ {
    expires 1d;
    add_header Cache-Control "public, max-age=86400";
}

# =============================================================================
# Archives - Medium Cache
# =============================================================================
location ~* \.(zip|tar|gz|bz2|rar|7z)$ {
    expires 7d;
    add_header Cache-Control "public, max-age=604800";
}

# =============================================================================
# Manifest Files - Short Cache with Revalidation
# =============================================================================
location ~* \.(json|webmanifest)$ {
    expires 1d;
    add_header Cache-Control "public, max-age=86400, must-revalidate";
    default_type application/json;
    charset utf-8;
}

# =============================================================================
# Service Worker - No Cache
# =============================================================================
# Service workers must always be fresh to ensure update checks
location ~* ^/(service-worker|sw)\.js$ {
    expires -1;
    add_header Cache-Control "no-cache, no-store, must-revalidate";
    add_header Pragma "no-cache";
    add_header Service-Worker-Allowed "/";
}

# =============================================================================
# API Responses - No Cache by Default
# =============================================================================
location /api/ {
    # Bypass cache for API calls
    expires -1;
    add_header Cache-Control "no-cache, no-store, must-revalidate, private";
    add_header Pragma "no-cache";

    # Add API-specific headers
    add_header X-Content-Type-Options "nosniff";
    add_header X-Frame-Options "DENY";

    # Proxy settings (if proxying to backend)
    proxy_cache_bypass 1;
    proxy_no_cache 1;
}

# =============================================================================
# Cacheable API Responses (Opt-in)
# =============================================================================
# Some API responses can be cached if explicitly marked
# This requires backend to send appropriate Cache-Control headers
location ~* /api/.*\?.*cache=true {
    # Respect backend cache headers
    expires off;
    add_header X-Cache-Status $upstream_cache_status;

    # Setup proxy cache (requires proxy_cache_path in http block)
    # proxy_cache api_cache;
    # proxy_cache_valid 200 5m;
    # proxy_cache_key "$scheme$request_method$host$request_uri";
    # proxy_cache_bypass $arg_nocache;
}

# =============================================================================
# Health Check Endpoints - No Cache
# =============================================================================
location ~* ^/health {
    expires -1;
    add_header Cache-Control "no-cache, no-store, must-revalidate";
    access_log off;
}

# =============================================================================
# Robots.txt and Sitemap - Short Cache
# =============================================================================
location ~* ^/(robots\.txt|sitemap\.xml)$ {
    expires 1h;
    add_header Cache-Control "public, max-age=3600";
    access_log off;
}

# =============================================================================
# Proxy Cache Configuration (Optional)
# =============================================================================
# Add to http block for proxy caching:
#
# proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:10m max_size=1g inactive=60m use_temp_path=off;
# proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:10m max_size=10g inactive=30d use_temp_path=off;
#
# proxy_cache_methods GET HEAD;
# proxy_cache_min_uses 2;
# proxy_cache_lock on;
# proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
# proxy_cache_background_update on;
# proxy_cache_revalidate on;

# =============================================================================
# Asset Versioning Strategy
# =============================================================================
# Recommended approach for cache busting:
#
# 1. Build Process:
#    - Generate unique hash for each file (e.g., main.abc123.js)
#    - Vite/Webpack handle this automatically
#
# 2. Deployment:
#    - Deploy new assets with new hashes
#    - Update HTML to reference new hashed files
#    - Old assets remain cached, new assets load fresh
#
# 3. nginx Configuration:
#    - Long cache for hashed assets (immutable)
#    - No cache for HTML entry point
#    - Backend handles cache headers for API
#
# Example Vite config for hashing:
# export default {
#   build: {
#     rollupOptions: {
#       output: {
#         entryFileNames: `assets/[name].[hash].js`,
#         chunkFileNames: `assets/[name].[hash].js`,
#         assetFileNames: `assets/[name].[hash].[ext]`
#       }
#     }
#   }
# }

# =============================================================================
# Cache Performance Testing
# =============================================================================
# Test cache headers:
#   curl -I https://sql-studio.app/assets/main.abc123.js
#   curl -I https://sql-studio.app/index.html
#
# Check cache status:
#   curl -I https://sql-studio.app | grep -i cache
#
# Verify compression:
#   curl -H "Accept-Encoding: gzip,deflate,br" -I https://sql-studio.app
#
# Test with different user agents:
#   curl -H "User-Agent: Mozilla/5.0" -I https://sql-studio.app
#
# Measure cache hit ratio:
#   grep "X-Cache-Status" /var/log/nginx/access.log | sort | uniq -c
#
# =============================================================================
# Best Practices
# =============================================================================
#
# 1. Use immutable for hashed assets
# 2. Never cache HTML entry points
# 3. Set appropriate stale-while-revalidate
# 4. Use ETags for validation
# 5. Compress all text-based files
# 6. Enable HTTP/2 server push for critical assets
# 7. Monitor cache hit ratios
# 8. Test with real-world network conditions
# 9. Use CDN for global distribution
# 10. Implement cache warming for popular content
#
# =============================================================================
