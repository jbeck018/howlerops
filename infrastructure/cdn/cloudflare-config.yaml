# =============================================================================
# SQL Studio - Cloudflare CDN Configuration
# =============================================================================
# Complete Cloudflare setup for optimal performance and security
# Apply via Cloudflare Dashboard or Terraform
# =============================================================================

# Domain Configuration
domains:
  primary: sql-studio.app
  www: www.sql-studio.app
  api: api.sql-studio.app
  cdn: cdn.sql-studio.app
  staging: staging.sql-studio.app

# DNS Records
dns_records:
  # Root domain
  - type: A
    name: "@"
    content: YOUR_INGRESS_IP
    proxied: true
    ttl: auto
    comment: "Main application"

  # WWW redirect
  - type: CNAME
    name: "www"
    content: "sql-studio.app"
    proxied: true
    ttl: auto

  # API subdomain
  - type: A
    name: "api"
    content: YOUR_INGRESS_IP
    proxied: true
    ttl: auto
    comment: "Backend API"

  # CDN for static assets
  - type: CNAME
    name: "cdn"
    content: "sql-studio.app"
    proxied: true
    ttl: auto

  # Staging environment
  - type: A
    name: "staging"
    content: YOUR_STAGING_IP
    proxied: true
    ttl: auto

# Page Rules (ordered by priority)
page_rules:
  # 1. API endpoints - bypass cache
  - targets:
      - "api.sql-studio.app/*"
    actions:
      cache_level: bypass
      browser_cache_ttl: 0
      security_level: medium
      rocket_loader: "off"
    priority: 1
    status: active

  # 2. Static assets - aggressive caching
  - targets:
      - "*.sql-studio.app/assets/*"
      - "cdn.sql-studio.app/*"
    actions:
      cache_level: cache_everything
      edge_cache_ttl: 31536000  # 1 year
      browser_cache_ttl: 31536000
    priority: 2
    status: active

  # 3. HTML files - no cache
  - targets:
      - "*.sql-studio.app/*.html"
      - "sql-studio.app/"
    actions:
      cache_level: bypass
      browser_cache_ttl: 0
      browser_check: "on"
    priority: 3
    status: active

  # 4. Images and media - long cache
  - targets:
      - "*.sql-studio.app/*.{jpg,jpeg,png,gif,svg,webp,avif,ico}"
    actions:
      cache_level: cache_everything
      edge_cache_ttl: 2592000  # 30 days
      browser_cache_ttl: 2592000
      polish: lossless
    priority: 4
    status: active

  # 5. Fonts - very long cache
  - targets:
      - "*.sql-studio.app/*.{woff,woff2,ttf,eot,otf}"
    actions:
      cache_level: cache_everything
      edge_cache_ttl: 31536000  # 1 year
      browser_cache_ttl: 31536000
    priority: 5
    status: active

# Cache Settings
cache:
  # Cache level
  cache_level: aggressive

  # Browser cache TTL
  browser_cache_ttl: 14400  # 4 hours default

  # Always online (serve stale content if origin down)
  always_online: "on"

  # Development mode (bypass cache)
  development_mode: "off"

  # Query string sort (improve cache hit ratio)
  query_string_sort: "on"

  # Cache by device type
  cache_by_device_type: "off"

# Performance Settings
performance:
  # Auto minify
  auto_minify:
    css: true
    js: true
    html: true

  # Brotli compression
  brotli: "on"

  # Early hints
  early_hints: "on"

  # HTTP/2
  http2: "on"

  # HTTP/3 (QUIC)
  http3: "on"

  # 0-RTT connection resumption
  zero_rtt: "on"

  # Rocket Loader (defer JS)
  rocket_loader: "off"  # Disabled - may break React apps

  # Mirage (lazy load images)
  mirage: "on"

  # Polish (image optimization)
  polish: lossless

  # WebP conversion
  webp: "on"

  # Enhanced HTTP/2 prioritization
  h2_prioritization: "on"

# Security Settings
security:
  # Security level
  security_level: medium  # off, essentially_off, low, medium, high, under_attack

  # Bot fight mode
  bot_fight_mode: "on"

  # Challenge passage (how long until re-challenge)
  challenge_ttl: 1800  # 30 minutes

  # Browser integrity check
  browser_check: "on"

  # Email obfuscation
  email_obfuscation: "on"

  # Hotlink protection
  hotlink_protection: "off"

  # IP geolocation header
  ip_geolocation: "on"

  # Opportunistic encryption
  opportunistic_encryption: "on"

  # Privacy pass support
  privacy_pass: "on"

  # Server side excludes
  server_side_exclude: "on"

  # TLS 1.3
  tls_1_3: "on"

  # Minimum TLS version
  min_tls_version: "1.2"

  # TLS client auth
  tls_client_auth: "off"

  # Automatic HTTPS rewrites
  automatic_https_rewrites: "on"

  # Always use HTTPS
  always_use_https: "on"

  # HSTS
  hsts:
    enabled: true
    max_age: 31536000
    include_subdomains: true
    preload: true
    nosniff: true

# Firewall Rules
firewall_rules:
  # Block known bad bots
  - expression: |
      (cf.client.bot) and not (cf.verified_bot_category in {"Search Engine Crawler" "Monitoring & Analytics"})
    action: block
    description: "Block bad bots"
    enabled: true

  # Rate limit API endpoints
  - expression: |
      (http.host eq "api.sql-studio.app") and (rate(1m) > 100)
    action: challenge
    description: "Rate limit API"
    enabled: true

  # Block specific countries (if needed)
  # - expression: |
  #     (ip.geoip.country in {"CN" "RU"})
  #   action: block
  #   description: "Block specific countries"
  #   enabled: false

  # Challenge suspicious requests
  - expression: |
      (cf.threat_score > 30)
    action: challenge
    description: "Challenge high threat score"
    enabled: true

  # Block SQL injection attempts
  - expression: |
      (http.request.uri.query contains "union select" or
       http.request.uri.query contains "script>" or
       http.request.uri.query contains "../")
    action: block
    description: "Block SQL injection and XSS attempts"
    enabled: true

# Rate Limiting Rules
rate_limiting:
  # API endpoint rate limit
  - match:
      request:
        methods: ["POST", "PUT", "DELETE"]
        url: "api.sql-studio.app/*"
    threshold: 20  # requests
    period: 60     # seconds
    action:
      mode: challenge
      timeout: 86400  # 24 hours

  # Login endpoint protection
  - match:
      request:
        methods: ["POST"]
        url: "api.sql-studio.app/api/v1/auth/login"
    threshold: 5
    period: 300  # 5 minutes
    action:
      mode: block
      timeout: 3600  # 1 hour

  # General rate limit
  - match:
      request:
        methods: ["GET", "POST"]
        url: "*.sql-studio.app/*"
    threshold: 100
    period: 60
    action:
      mode: challenge
      timeout: 3600

# Load Balancing (if using multiple origins)
load_balancing:
  pools:
    - name: primary-pool
      description: "Primary backend servers"
      enabled: true
      minimum_origins: 1
      monitor: health-check
      origins:
        - name: server-1
          address: YOUR_BACKEND_IP_1
          enabled: true
          weight: 1
        - name: server-2
          address: YOUR_BACKEND_IP_2
          enabled: true
          weight: 1

  monitors:
    - name: health-check
      type: https
      method: GET
      path: /health
      interval: 60
      timeout: 5
      retries: 2
      expected_codes: "200"
      follow_redirects: false

# Workers (Edge functions - optional)
workers:
  # Redirect www to non-www
  - name: www-redirect
    enabled: true
    routes:
      - pattern: "www.sql-studio.app/*"
    script: |
      addEventListener('fetch', event => {
        event.respondWith(handleRequest(event.request))
      })

      async function handleRequest(request) {
        const url = new URL(request.url)
        if (url.hostname === 'www.sql-studio.app') {
          url.hostname = 'sql-studio.app'
          return Response.redirect(url.toString(), 301)
        }
        return fetch(request)
      }

  # Security headers
  - name: security-headers
    enabled: true
    routes:
      - pattern: "sql-studio.app/*"
      - pattern: "api.sql-studio.app/*"
    script: |
      addEventListener('fetch', event => {
        event.respondWith(addSecurityHeaders(event.request))
      })

      async function addSecurityHeaders(request) {
        const response = await fetch(request)
        const newHeaders = new Headers(response.headers)

        newHeaders.set('X-Frame-Options', 'DENY')
        newHeaders.set('X-Content-Type-Options', 'nosniff')
        newHeaders.set('X-XSS-Protection', '1; mode=block')
        newHeaders.set('Referrer-Policy', 'strict-origin-when-cross-origin')
        newHeaders.set('Permissions-Policy', 'geolocation=(), microphone=(), camera=()')

        return new Response(response.body, {
          status: response.status,
          statusText: response.statusText,
          headers: newHeaders
        })
      }

# Transform Rules (modify requests/responses)
transform_rules:
  # Add custom response headers
  - description: "Add security headers"
    enabled: true
    expression: "(http.host eq \"sql-studio.app\")"
    action:
      response_headers:
        set:
          X-Served-By: "Cloudflare"
          X-Cache-Status: "${cf.cache_status}"

# Custom SSL/TLS
ssl_tls:
  # SSL mode
  mode: full_strict  # off, flexible, full, full_strict

  # Certificate authority
  certificate_authority: lets_encrypt

  # TLS 1.3
  tls_1_3: enabled

  # Automatic HTTPS rewrites
  automatic_https_rewrites: "on"

  # Always use HTTPS
  always_use_https: "on"

  # Opportunistic onion
  opportunistic_onion: "on"

  # Onion routing
  onion_routing: "off"

# =============================================================================
# Setup Instructions
# =============================================================================
#
# 1. Add domain to Cloudflare:
#    - Sign up at https://dash.cloudflare.com
#    - Add site: sql-studio.app
#    - Update nameservers at your domain registrar
#
# 2. Configure DNS:
#    - Add A records for @ and api pointing to your ingress IP
#    - Add CNAME for www pointing to @
#    - Enable proxy (orange cloud) for CDN benefits
#
# 3. Enable SSL/TLS:
#    - Set mode to "Full (strict)"
#    - Enable "Always Use HTTPS"
#    - Enable "Automatic HTTPS Rewrites"
#
# 4. Configure Caching:
#    - Set cache level to "Standard" or "Aggressive"
#    - Add page rules for static assets
#    - Enable "Query String Sort"
#
# 5. Enable Security:
#    - Security level: Medium
#    - Enable bot fight mode
#    - Configure firewall rules
#    - Set up rate limiting
#
# 6. Optimize Performance:
#    - Enable Auto Minify (CSS, JS, HTML)
#    - Enable Brotli
#    - Enable HTTP/2 and HTTP/3
#    - Enable Early Hints
#
# 7. Test Configuration:
#    - curl -I https://sql-studio.app
#    - Check headers and cache status
#    - Test API endpoints
#
# Terraform Configuration:
# Use the official Cloudflare Terraform provider to manage this config as code
# https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs
#
# =============================================================================
