# =============================================================================
# SQL Studio - Secrets Template
# =============================================================================
# IMPORTANT: This is a TEMPLATE file. DO NOT commit actual secrets to git.
#
# To use this template:
# 1. Copy this file to secrets.yaml (which is .gitignored)
# 2. Replace all placeholder values with actual secrets
# 3. Base64 encode each value: echo -n "your-secret" | base64
# 4. Apply to cluster: kubectl apply -f secrets.yaml
#
# Alternative: Use external secret management (recommended for production):
# - Kubernetes External Secrets Operator
# - HashiCorp Vault
# - AWS Secrets Manager
# - GCP Secret Manager
# - Azure Key Vault
# =============================================================================

apiVersion: v1
kind: Secret
metadata:
  name: sql-studio-secrets
  namespace: sql-studio
  labels:
    app: sql-studio
  annotations:
    description: "Application secrets for SQL Studio"
type: Opaque

# All values must be base64 encoded
# Example: echo -n "your-value" | base64
data:
  # Turso Database Configuration
  # Format: libsql://your-database.turso.io
  turso-url: "REPLACE_WITH_BASE64_ENCODED_TURSO_URL"

  # Turso Authentication Token
  # Get from: turso db tokens create your-database
  turso-auth-token: "REPLACE_WITH_BASE64_ENCODED_TURSO_TOKEN"

  # JWT Secret (64+ characters recommended)
  # Generate with: openssl rand -base64 64
  jwt-secret: "REPLACE_WITH_BASE64_ENCODED_JWT_SECRET"

  # Email Service (Resend)
  # Get from: https://resend.com/api-keys
  resend-api-key: "REPLACE_WITH_BASE64_ENCODED_RESEND_KEY"

  # Email sender address (verified in Resend)
  resend-from-email: "REPLACE_WITH_BASE64_ENCODED_FROM_EMAIL"

---
# =============================================================================
# TLS Certificate Secret (managed by cert-manager)
# =============================================================================
# This is auto-generated by cert-manager, but included here for reference
# DO NOT create this manually if using cert-manager
apiVersion: v1
kind: Secret
metadata:
  name: sql-studio-tls
  namespace: sql-studio
  labels:
    app: sql-studio
  annotations:
    cert-manager.io/certificate-name: "sql-studio-cert"
type: kubernetes.io/tls
data:
  # Auto-generated by cert-manager
  tls.crt: ""
  tls.key: ""

---
# =============================================================================
# Basic Auth Secret (for staging environment)
# =============================================================================
# Generate with: htpasswd -c auth username
# Then: kubectl create secret generic staging-basic-auth --from-file=auth
apiVersion: v1
kind: Secret
metadata:
  name: staging-basic-auth
  namespace: sql-studio
  labels:
    app: sql-studio
    environment: staging
type: Opaque
data:
  # Format: username:hashed_password
  # Generate: htpasswd -nb username password | base64
  auth: "REPLACE_WITH_BASE64_ENCODED_HTPASSWD"

---
# =============================================================================
# Image Pull Secrets (if using private registry)
# =============================================================================
# Only needed if your images are in a private registry
apiVersion: v1
kind: Secret
metadata:
  name: gcr-json-key
  namespace: sql-studio
  labels:
    app: sql-studio
type: kubernetes.io/dockerconfigjson
data:
  # Create with: kubectl create secret docker-registry gcr-json-key \
  #   --docker-server=gcr.io \
  #   --docker-username=_json_key \
  #   --docker-password="$(cat key.json)" \
  #   --docker-email=your-email@example.com
  .dockerconfigjson: "REPLACE_WITH_DOCKER_CONFIG_JSON"

---
# =============================================================================
# Secret Creation Commands
# =============================================================================
# Quick commands to create secrets from command line:
#
# 1. Create from literal values:
#    kubectl create secret generic sql-studio-secrets \
#      --namespace=sql-studio \
#      --from-literal=turso-url='libsql://your-db.turso.io' \
#      --from-literal=turso-auth-token='your-token' \
#      --from-literal=jwt-secret='your-secret' \
#      --from-literal=resend-api-key='your-key' \
#      --from-literal=resend-from-email='noreply@sql-studio.app'
#
# 2. Create from .env file:
#    kubectl create secret generic sql-studio-secrets \
#      --namespace=sql-studio \
#      --from-env-file=.env.production
#
# 3. Create from individual files:
#    kubectl create secret generic sql-studio-secrets \
#      --namespace=sql-studio \
#      --from-file=turso-url=./secrets/turso-url.txt \
#      --from-file=turso-auth-token=./secrets/turso-token.txt \
#      --from-file=jwt-secret=./secrets/jwt-secret.txt
#
# 4. Verify secrets (without showing values):
#    kubectl get secrets -n sql-studio
#    kubectl describe secret sql-studio-secrets -n sql-studio
#
# 5. View secret values (be careful in production):
#    kubectl get secret sql-studio-secrets -n sql-studio -o json | \
#      jq '.data | map_values(@base64d)'
#
# 6. Update a secret:
#    kubectl create secret generic sql-studio-secrets \
#      --namespace=sql-studio \
#      --from-literal=jwt-secret='new-secret' \
#      --dry-run=client -o yaml | kubectl apply -f -
#
# 7. Delete secrets:
#    kubectl delete secret sql-studio-secrets -n sql-studio
#
# =============================================================================
# External Secrets Operator Example (Recommended for Production)
# =============================================================================
# Using External Secrets Operator with GCP Secret Manager:
#
# apiVersion: external-secrets.io/v1beta1
# kind: SecretStore
# metadata:
#   name: gcpsm-secret-store
#   namespace: sql-studio
# spec:
#   provider:
#     gcpsm:
#       projectID: "your-project-id"
#       auth:
#         secretRef:
#           secretAccessKeyRef:
#             name: gcpsm-secret
#             key: secret-access-credentials
#
# ---
# apiVersion: external-secrets.io/v1beta1
# kind: ExternalSecret
# metadata:
#   name: sql-studio-secrets
#   namespace: sql-studio
# spec:
#   refreshInterval: 1h
#   secretStoreRef:
#     name: gcpsm-secret-store
#     kind: SecretStore
#   target:
#     name: sql-studio-secrets
#     creationPolicy: Owner
#   data:
#     - secretKey: turso-url
#       remoteRef:
#         key: turso-url
#     - secretKey: turso-auth-token
#       remoteRef:
#         key: turso-auth-token
#     - secretKey: jwt-secret
#       remoteRef:
#         key: jwt-secret
#     - secretKey: resend-api-key
#       remoteRef:
#         key: resend-api-key
#     - secretKey: resend-from-email
#       remoteRef:
#         key: resend-from-email
# =============================================================================
